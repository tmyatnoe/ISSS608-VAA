[
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html",
    "title": "Take-home Exercise 1",
    "section": "",
    "text": "1. Overview\n\n1.1 Setting the scene\nThere are two major residential property market in Singapore, namely public and private housing. Public housing aims to meet the basic need of the general public with monthly household income less than or equal to S$14,000. For families with monthly household income more than S$14,000, they need to turn to the private residential market.\n\n\n1.2 Task\nThis exercise aims to analyse REALIS (Real Estate Information System) property data to reveal the private residential market and sub-markets of Singapore for the 1st quarter of 2024.\n\n\n\n2. Getting Started\n\n2.1 Installing and loading the required libraries\n\n\n\nPackage\nDescription\n\n\n\n\ntidyverse\nUsed data import, tidying, manipulation, and data visualization. Packages like readr, dplyr, lubridate are part of tidyverse.\n\n\npatchwork\nUsed to combine individual ggplot into one graphic.\n\n\nggthemes\nProvides ‘ggplot2’ themes and scales that replicate the look of plots by Edward Tufte, Stephen Few, ‘Fivethirtyeight’, ‘The Economist’, ‘Stata’, ‘Excel’, and ‘The Wall Street Journal’, among others.\n\n\nhrbrthemes\nA compilation of extra ‘ggplot2’ themes, scales and utilities, including a spell check function for plot label fields and an overall emphasis on typography.\n\n\n\nThe code chunk below uses p_load() function from pacman package to check if packages listed are already installed in the computer. The packages are loaded if they are found to be installed. If they are not installed, the function will proceed to install and load them into R environment.\n\npacman::p_load(tidyverse,patchwork,ggthemes,hrbrthemes)\n\n\n\n2.2 Importing Data\nBelow code imports 5 .csv data from REALIS into R environment by utilizing read_csv() function of readr package. readr is part of tidyverse packages.\n\nrealis1 &lt;- read_csv(\"data/ResidentialTransaction20240308160536.csv\")\nrealis2 &lt;- read_csv(\"data/ResidentialTransaction20240308160736.csv\")\nrealis3 &lt;- read_csv(\"data/ResidentialTransaction20240308161009.csv\")\nrealis4 &lt;- read_csv(\"data/ResidentialTransaction20240308161109.csv\")\nrealis5 &lt;- read_csv(\"data/ResidentialTransaction20240414220633.csv\")\n\n\n\n2.3 Data Pre-processing\n\n2.3.1 Combining all quarter data into one file\nAll residential property market data from REALIS by different quarters are merged into one file using rbind().\n\nrealis_merge &lt;- rbind(realis1, realis2, realis3, realis4, realis5)\n\n\n\n2.3.2 Checking for duplicates\n\nrealis_merge[duplicated(realis_merge),]\n\n# A tibble: 0 × 21\n# ℹ 21 variables: Project Name &lt;chr&gt;, Transacted Price ($) &lt;dbl&gt;,\n#   Area (SQFT) &lt;dbl&gt;, Unit Price ($ PSF) &lt;dbl&gt;, Sale Date &lt;chr&gt;,\n#   Address &lt;chr&gt;, Type of Sale &lt;chr&gt;, Type of Area &lt;chr&gt;, Area (SQM) &lt;dbl&gt;,\n#   Unit Price ($ PSM) &lt;dbl&gt;, Nett Price($) &lt;chr&gt;, Property Type &lt;chr&gt;,\n#   Number of Units &lt;dbl&gt;, Tenure &lt;chr&gt;, Completion Date &lt;chr&gt;,\n#   Purchaser Address Indicator &lt;chr&gt;, Postal Code &lt;chr&gt;,\n#   Postal District &lt;chr&gt;, Postal Sector &lt;chr&gt;, Planning Region &lt;chr&gt;, …\n\n\nNo duplicated rows are present in the data based on duplicate check above using duplicated() function.\n\n\n2.3.3 Rename columns for further data visualization\nBelow glimpse of data set shows the current column name. We can see there are spaces in column name.\n\nglimpse(realis_merge)\n\nRows: 26,806\nColumns: 21\n$ `Project Name`                &lt;chr&gt; \"THE REEF AT KING'S DOCK\", \"URBAN TREASU…\n$ `Transacted Price ($)`        &lt;dbl&gt; 2317000, 1823500, 1421112, 1258112, 1280…\n$ `Area (SQFT)`                 &lt;dbl&gt; 882.65, 882.65, 1076.40, 1033.34, 871.88…\n$ `Unit Price ($ PSF)`          &lt;dbl&gt; 2625, 2066, 1320, 1218, 1468, 1767, 1095…\n$ `Sale Date`                   &lt;chr&gt; \"01 Jan 2023\", \"02 Jan 2023\", \"02 Jan 20…\n$ Address                       &lt;chr&gt; \"12 HARBOURFRONT AVENUE #05-32\", \"205 JA…\n$ `Type of Sale`                &lt;chr&gt; \"New Sale\", \"New Sale\", \"New Sale\", \"New…\n$ `Type of Area`                &lt;chr&gt; \"Strata\", \"Strata\", \"Strata\", \"Strata\", …\n$ `Area (SQM)`                  &lt;dbl&gt; 82.0, 82.0, 100.0, 96.0, 81.0, 308.7, 42…\n$ `Unit Price ($ PSM)`          &lt;dbl&gt; 28256, 22238, 14211, 13105, 15802, 19015…\n$ `Nett Price($)`               &lt;chr&gt; \"-\", \"-\", \"-\", \"-\", \"-\", \"-\", \"-\", \"-\", …\n$ `Property Type`               &lt;chr&gt; \"Condominium\", \"Condominium\", \"Executive…\n$ `Number of Units`             &lt;dbl&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…\n$ Tenure                        &lt;chr&gt; \"99 yrs from 12/01/2021\", \"Freehold\", \"9…\n$ `Completion Date`             &lt;chr&gt; \"Uncompleted\", \"Uncompleted\", \"Uncomplet…\n$ `Purchaser Address Indicator` &lt;chr&gt; \"HDB\", \"Private\", \"HDB\", \"HDB\", \"HDB\", \"…\n$ `Postal Code`                 &lt;chr&gt; \"097996\", \"419535\", \"269343\", \"269294\", …\n$ `Postal District`             &lt;chr&gt; \"04\", \"14\", \"27\", \"27\", \"28\", \"19\", \"10\"…\n$ `Postal Sector`               &lt;chr&gt; \"09\", \"41\", \"26\", \"26\", \"79\", \"54\", \"27\"…\n$ `Planning Region`             &lt;chr&gt; \"Central Region\", \"East Region\", \"North …\n$ `Planning Area`               &lt;chr&gt; \"Bukit Merah\", \"Bedok\", \"Yishun\", \"Yishu…\n\n\nSpace in column names will create error when used as it is in R code. Hence, replacing them with underscore is necessary. Use gsub() to replace space with underscores and use rename_with() function from dplyr to rename all the columns with new column names.\n\nrealis_merge &lt;- realis_merge %&gt;%\n  rename_with(~ gsub(\" \", \"_\", .), everything())\n\nNow, we can see that column names are renamed accordingly with underscore in place of space.\n\nCodeData Glimpse\n\n\n\nglimpse(realis_merge)\n\n\n\n\n\nRows: 26,806\nColumns: 21\n$ Project_Name                &lt;chr&gt; \"THE REEF AT KING'S DOCK\", \"URBAN TREASURE…\n$ `Transacted_Price_($)`      &lt;dbl&gt; 2317000, 1823500, 1421112, 1258112, 128000…\n$ `Area_(SQFT)`               &lt;dbl&gt; 882.65, 882.65, 1076.40, 1033.34, 871.88, …\n$ `Unit_Price_($_PSF)`        &lt;dbl&gt; 2625, 2066, 1320, 1218, 1468, 1767, 1095, …\n$ Sale_Date                   &lt;chr&gt; \"01 Jan 2023\", \"02 Jan 2023\", \"02 Jan 2023…\n$ Address                     &lt;chr&gt; \"12 HARBOURFRONT AVENUE #05-32\", \"205 JALA…\n$ Type_of_Sale                &lt;chr&gt; \"New Sale\", \"New Sale\", \"New Sale\", \"New S…\n$ Type_of_Area                &lt;chr&gt; \"Strata\", \"Strata\", \"Strata\", \"Strata\", \"S…\n$ `Area_(SQM)`                &lt;dbl&gt; 82.0, 82.0, 100.0, 96.0, 81.0, 308.7, 420.…\n$ `Unit_Price_($_PSM)`        &lt;dbl&gt; 28256, 22238, 14211, 13105, 15802, 19015, …\n$ `Nett_Price($)`             &lt;chr&gt; \"-\", \"-\", \"-\", \"-\", \"-\", \"-\", \"-\", \"-\", \"-…\n$ Property_Type               &lt;chr&gt; \"Condominium\", \"Condominium\", \"Executive C…\n$ Number_of_Units             &lt;dbl&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, …\n$ Tenure                      &lt;chr&gt; \"99 yrs from 12/01/2021\", \"Freehold\", \"99 …\n$ Completion_Date             &lt;chr&gt; \"Uncompleted\", \"Uncompleted\", \"Uncompleted…\n$ Purchaser_Address_Indicator &lt;chr&gt; \"HDB\", \"Private\", \"HDB\", \"HDB\", \"HDB\", \"Pr…\n$ Postal_Code                 &lt;chr&gt; \"097996\", \"419535\", \"269343\", \"269294\", \"7…\n$ Postal_District             &lt;chr&gt; \"04\", \"14\", \"27\", \"27\", \"28\", \"19\", \"10\", …\n$ Postal_Sector               &lt;chr&gt; \"09\", \"41\", \"26\", \"26\", \"79\", \"54\", \"27\", …\n$ Planning_Region             &lt;chr&gt; \"Central Region\", \"East Region\", \"North Re…\n$ Planning_Area               &lt;chr&gt; \"Bukit Merah\", \"Bedok\", \"Yishun\", \"Yishun\"…\n\n\n\n\n\n\n\n2.3.4 Create Quarter Column\nUse as.Date() function to put Sale_Date column into date object, specify format to ensure as.Date() recognize the content accurately as date. Use year() and quarter() functions from lubridate package to extract year and use paste() to concatenate the strings.\n\nCodeData Glimpse\n\n\n\nrealis_merge$Sale_Date &lt;- as.Date(realis_merge$Sale_Date, format = \"%d %b %Y\")\nrealis_merge$Quarter &lt;- paste(year(realis_merge$Sale_Date), \"Q\", quarter(realis_merge$Sale_Date), sep=\"\")\n\n\n\n\nglimpse(realis_merge)\n\nRows: 26,806\nColumns: 22\n$ Project_Name                &lt;chr&gt; \"THE REEF AT KING'S DOCK\", \"URBAN TREASURE…\n$ `Transacted_Price_($)`      &lt;dbl&gt; 2317000, 1823500, 1421112, 1258112, 128000…\n$ `Area_(SQFT)`               &lt;dbl&gt; 882.65, 882.65, 1076.40, 1033.34, 871.88, …\n$ `Unit_Price_($_PSF)`        &lt;dbl&gt; 2625, 2066, 1320, 1218, 1468, 1767, 1095, …\n$ Sale_Date                   &lt;date&gt; 2023-01-01, 2023-01-02, 2023-01-02, 2023-…\n$ Address                     &lt;chr&gt; \"12 HARBOURFRONT AVENUE #05-32\", \"205 JALA…\n$ Type_of_Sale                &lt;chr&gt; \"New Sale\", \"New Sale\", \"New Sale\", \"New S…\n$ Type_of_Area                &lt;chr&gt; \"Strata\", \"Strata\", \"Strata\", \"Strata\", \"S…\n$ `Area_(SQM)`                &lt;dbl&gt; 82.0, 82.0, 100.0, 96.0, 81.0, 308.7, 420.…\n$ `Unit_Price_($_PSM)`        &lt;dbl&gt; 28256, 22238, 14211, 13105, 15802, 19015, …\n$ `Nett_Price($)`             &lt;chr&gt; \"-\", \"-\", \"-\", \"-\", \"-\", \"-\", \"-\", \"-\", \"-…\n$ Property_Type               &lt;chr&gt; \"Condominium\", \"Condominium\", \"Executive C…\n$ Number_of_Units             &lt;dbl&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, …\n$ Tenure                      &lt;chr&gt; \"99 yrs from 12/01/2021\", \"Freehold\", \"99 …\n$ Completion_Date             &lt;chr&gt; \"Uncompleted\", \"Uncompleted\", \"Uncompleted…\n$ Purchaser_Address_Indicator &lt;chr&gt; \"HDB\", \"Private\", \"HDB\", \"HDB\", \"HDB\", \"Pr…\n$ Postal_Code                 &lt;chr&gt; \"097996\", \"419535\", \"269343\", \"269294\", \"7…\n$ Postal_District             &lt;chr&gt; \"04\", \"14\", \"27\", \"27\", \"28\", \"19\", \"10\", …\n$ Postal_Sector               &lt;chr&gt; \"09\", \"41\", \"26\", \"26\", \"79\", \"54\", \"27\", …\n$ Planning_Region             &lt;chr&gt; \"Central Region\", \"East Region\", \"North Re…\n$ Planning_Area               &lt;chr&gt; \"Bukit Merah\", \"Bedok\", \"Yishun\", \"Yishun\"…\n$ Quarter                     &lt;chr&gt; \"2023Q1\", \"2023Q1\", \"2023Q1\", \"2023Q1\", \"2…\n\n\n\n\n\n\n\n\n\n3. Data Visualization\n\n3.1 Data Visualization 1\nData manipulation is done by dplyr functions. To get Number of Units Sold by Property Type and Quarter, use group_by() to group merged REALIS data into by Property Type and Quarter, then use summarise() to calculate the total number of units sold for each group. To get Overall Number of Units Sold by Quarter, use group_by() to group merged REALIS data into by Quarter, then use summarise() to calculate the total number of units sold for each quarter.\nUse ggplot() and geom_bar() from ggplot2 to plot:\n\nOverall Number of Units Sold by Quarter\nNumber of Units Sold by Property Type and Quarter\n\nMore functions from ggplot2 are used: ylim() and labs() functions from ggplot2 are used to set axis limit and chart title accordingly. Use theme() to set text size of chart title, axis text, legend text and legend title. scale_x_discrete() and guide_axis() are used to avoid overlapping labels. scale_fill_brewer() is used to color the bars. Use ggplot2 extension called patchwork to combine separate ggplot2 graphs into a single figure. Use theme_wsj() from ggtheme to set Wall Street Journal theme.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# Get number of units sold for each combination of Property_Type and Quarter\ntrans_per_prop_quarter &lt;- realis_merge %&gt;%\n  group_by(Property_Type, Quarter) %&gt;%\n  summarise(Total_Number_of_Units = sum(Number_of_Units, na.rm = TRUE), .groups = 'drop')\n\n# Plot the bar chart for Number of Units Sold by Property Type and Quarter\np1 &lt;- ggplot(trans_per_prop_quarter, aes(x = Property_Type, y = Total_Number_of_Units, fill = Quarter)) +\n  geom_bar(stat = \"identity\", position = \"dodge\") +\n  labs(x = \"Property Type\", y = \"No. of Units Sold\", title = \"Number of Units Sold by Property Type and Quarter\")+\n  ylim(0,3200) +\n  theme_wsj()+\n  theme(plot.title = element_text(size = rel(0.4)),  \n        axis.text.x = element_text(size = rel(0.7)),  \n        axis.text.y = element_text(size = rel(0.7)),\n        legend.text = element_text(size = rel(0.7)),\n        legend.title = element_text(size = rel(0.4)))  +\n  scale_x_discrete(guide = guide_axis(n.dodge = 2)) +\n  scale_fill_brewer(palette = \"Blues\")\n\n# Get overall Number of units sold per quarter\nunits_by_quarter &lt;- realis_merge %&gt;%\n  group_by(Quarter) %&gt;%\n  summarise(Total_Units = sum(Number_of_Units, na.rm = TRUE), .groups = 'drop')\n\n# Plot overall Number of units sold trend\np2 &lt;- ggplot(units_by_quarter, aes(x = Quarter, y = Total_Units)) +\n  geom_bar(stat = \"identity\", fill = \"gainsboro\") +  \n  labs(\n    title = \"Overall Number of Units Sold by Quarter\",\n    x = \"Quarter\",\n    y = \"No. of Units Sold\"\n  ) +\n  ylim(0,8000) +\n  geom_text(aes(label = Total_Units),  \n            vjust = -0.3,\n            size = rel(3),\n            color = \"black\") +\n  theme_wsj()+\n  theme(plot.title = element_text(size = rel(0.4)),  \n        axis.text.x = element_text(size = rel(0.7)), \n        axis.text.y = element_text(size = rel(0.7)))  \n\n# Combine the plots into one\np &lt;- (p2/p1) \np \n\n\n\n\n\n\n\n\n\n\nInsights from Data Visualization 1:\n\n\n\n\nNumber of units sold per quarter shows an upward trend from 2023 Q1 to 2023 Q3 but it has since been on downward trend.\nThere is slight uptick seen in Q1 2024 in number of units sold compared to Q4 2023.\nBased on further breakdown by property type and quarter, apartment, condominium and executive condominium make up majority of sales volume followed by terrace house, semi-detached house and detached house.\nIn Q1 2024, there is a decline in number of apartment and condo units sold while there is a growth in executive condo units sold compared to Q4 2023.\n\n\n\n\n\n3.2 Data Visualization 2\nTo get Number of Units Sold by Planning Region and Quarter, use group_by() to group merged REALIS data into by Planning Region and Quarter, then use summarise() to calculate the total number of units sold for each group. To get Number of Units Sold by Planning Region and Quarter, use group_by() to group merged REALIS data into by Type of Sale and Quarter, then use summarise() to calculate the total number of units sold for each group.\nUse ggplot() and geom_bar() from ggplot2 to plot:\n\nNumber of Units Sold by Planning Region and Quarter\nNumber of Units Sold by Type of Sale and Quarter\n\nMore functions from ggplot2 are used: ylim() and labs() functions from ggplot2 are used to set axis limit and chart title accordingly. Use theme() to set text size of chart title, axis text, legend text and legend title. scale_fill_brewer() is used to color the bars. Use ggplot2 extension called patchwork to combine separate ggplot2 graphs into a single figure. Use theme_wsj() from ggtheme to set Wall Street Journal theme.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# Get number of units sold for each combination of Planning Region and Quarter\ntrans_per_reg_quarter &lt;- realis_merge %&gt;%\n  group_by(Planning_Region, Quarter) %&gt;%\n  summarise(Total_Number_of_Units = sum(Number_of_Units, na.rm = TRUE), .groups = 'drop')\n\n# Plot the bar chart for Number of Units Sold by Planning Region and Quarter\np3 &lt;- ggplot(trans_per_reg_quarter, aes(x = Planning_Region, y = Total_Number_of_Units, fill = Quarter)) +\n  geom_bar(stat = \"identity\", position = \"dodge\") +\n  labs(x = \"Planning Region\", y = \"No. of Units Sold\", title = \"Number of Units Sold by Planning Region and Quarter\")+\n  ylim(0,4200) +\n  theme_wsj()+\n  theme(plot.title = element_text(size = rel(0.4)),  \n        axis.text.x = element_text(size = rel(0.7)),  \n        axis.text.y = element_text(size = rel(0.7)),\n        legend.text = element_text(size = rel(0.7)),\n        legend.title = element_text(size = rel(0.4)))  +\n    scale_fill_brewer(palette = \"Blues\")\n\n# Get number of units sold for each combination of Type of Sale and Quarter\ntrans_per_sale_quarter &lt;- realis_merge %&gt;%\n  group_by(Type_of_Sale, Quarter) %&gt;%\n  summarise(Total_Number_of_Units = sum(Number_of_Units, na.rm = TRUE), .groups = 'drop')\n\n# Plot the bar chart for Number of Units Sold by Type of Sale and Quarter\np4 &lt;- ggplot(trans_per_sale_quarter, aes(x = Type_of_Sale, y = Total_Number_of_Units, fill = Quarter)) +\n  geom_bar(stat = \"identity\", position = \"dodge\") +\n  labs(x = \"Type of Sale\", y = \"No. of Units Sold\", title = \"Number of Units Sold by Type of Sale and Quarter\")+\n  ylim(0,4200) +\n  theme_wsj()+\n  theme(plot.title = element_text(size = rel(0.4)),  \n        axis.text.x = element_text(size = rel(0.7)),  \n        axis.text.y = element_text(size = rel(0.7)),\n        legend.text = element_text(size = rel(0.7)),\n        legend.title = element_text(size = rel(0.4)))  +\n   scale_fill_brewer(palette = \"Blues\")\n\n# Combine the plots into one\npp &lt;- (p3/p4) \npp\n\n\n\n\n\n\n\n\n\n\nInsights from Data Visualization 2\n\n\n\n\nIn 2024 Q1, there is decrease in number of unit sold in Central, East and North Regions while an uptick is seen in North East and West Regions.\nIn terms of type of sale trend, 2024 Q1 Resale and Sub Sale are decreasing while only New sale showed an increasing trend compared to Q4 2023.\n\n\n\n\n\n3.3 Data Visualization 3\nIn this visualization, let’s take a look at price trend of the 2 property types with most number of units sold, Apartments and Condominiums. To get condominium and apartment data only, use filter() function from dplyr to filter from realis_merge data. Median data for each quarter is calculated by grouping data into each quarter using group_by(), followed by using median() to compute the median value.\nUse ggplot() and geom_boxplot() from ggplot2 to plot boxplot for\n\nCondominium\nApartment\n\nMore functions from ggplot2 are used: labs() function is used to set axis limit and chart title accordingly. Use theme() to set text size of chart title, axis text, legend text and legend title. geom_text() to add median label to box plot. Use theme_wsj() from ggtheme to set Wall Street Journal theme.\n\nCondominiumsApartmentsCode\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n### Code for Condominium\n# Filter for 'Condominium' in the 'Property_Type' column\ncondo_data &lt;- realis_merge %&gt;%\n  filter(Property_Type == \"Condominium\") \n\n# Calculate median for each Quarter\ncondo_median &lt;- condo_data %&gt;%\n  group_by(Quarter) %&gt;%\n  summarise(median = median(`Unit_Price_($_PSM)`, na.rm = TRUE))\n\n# Create boxplot\nggplot(condo_data, aes(x = Quarter, y = `Unit_Price_($_PSM)`)) + \n  geom_boxplot(fill = \"lightskyblue2\") +\n  geom_text(data = condo_median, aes(x = Quarter, y = median, label = median), \n            vjust = -0.5, size = 3) +\n  labs(\n    title = \"Boxplot of Unit Price ($ PSM) by Quarter for Condominiums\",\n    x = \"Quarter\",\n    y = \"Unit Price ($ PSM)\"\n  ) +\n  theme_wsj() +\n  theme(plot.title = element_text(size = rel(0.4)),  \n        axis.text.x = element_text(size = rel(0.7)), \n        axis.text.y = element_text(size = rel(0.7))) \n### Code for Apartment\naprt_data &lt;- realis_merge %&gt;%\n  filter(Property_Type == \"Apartment\") \n\n# Calculate median for each Quarter\naprt_median &lt;- aprt_data %&gt;%\n  group_by(Quarter) %&gt;%\n  summarise(median = median(`Unit_Price_($_PSM)`, na.rm = TRUE))\n\n# Create boxplot\nggplot(aprt_data, aes(x = Quarter, y = `Unit_Price_($_PSM)`)) + \n  geom_boxplot(fill = \"lightskyblue3\") +\n  geom_text(data = aprt_median, aes(x = Quarter, y = median, label = median), \n            vjust = -0.5, size = 3) +\n  labs(\n    title = \"Boxplot of Unit Price ($ PSM) by Quarter for Apartments\",\n    x = \"Quarter\",\n    y = \"Unit Price ($ PSM)\"\n  ) +\n  theme_wsj() +\n  theme(plot.title = element_text(size = rel(0.4)),  \n        axis.text.x = element_text(size = rel(0.7)), \n        axis.text.y = element_text(size = rel(0.7))) \n\n\n\n\n\n\n\n\n\n\nInsights from Data Visualization 3\n\n\n\n\nCondominium price (Price per squared meter) trend from 2023 Q1 to 2024 Q1 remains relatively flat within the range of S$18125.5 to S$18750.\nCondominium prices in 2024 Q1 has increased slightly compared to 2023 Q4 from S$18125.5 to S$18311.\nApartment price (Price per squared meter) trend has shown a downward trend starting from 2023 Q2 to 2023 Q4 although there was an uptrend from 2023 Q1 to 2023 Q2.\nApartment prices in 2024 Q1 has increased slightly compared to 2023 Q4 from S$21916.5 to S$22768.\nSlight increase in Condominium and Apartment prices observed here are in line with what is reported in media for Q1 2024 in CNA article.\n\n\n\n\n\n\n4. Summary and Conclusion\nNumber of units sold per quarter shows an upward trend from 2023 Q1 to 2023 Q3 but it has since been on downward trend until slight uptick seen in Q1 2023. Apartment, condominium and executive condominium make up majority of sales volume. Decline in number of apartment and condo (two highest transacted private property types in Singapore) units sale observed for Q1 2024.\nIn 2024 Q1, there is decrease in number of unit sold in Central, East and North Regions while an uptick is seen in North East and West Regions. 2024 Q1 Resale and Sub Sale are decreasing while only New sale showed an increasing trend compared to Q4 2023.\nIn comparison to Q4 2023, slight increase in Condominium and Apartment prices are observed which aligns with what is reported in media for Q1 2024.\n\n\n5. References\nHDB resale prices rise 1.7%; private home prices up 1.5% in first quarter: Flash estimates\nGuide to Different Types of Properties in Singapore\nggplot2 legend : Easy steps to change the position and the appearance of a graph legend in R software\nHow to alternate a new line for overlapping x axis labels?"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex02/In-class_Ex02.html",
    "href": "In-class_Ex/In-class_Ex02/In-class_Ex02.html",
    "title": "In-class Exercise 2",
    "section": "",
    "text": "In the code chunk below, p_load() of pacman package is used to load tidyverse, ggdist, ggthemes family of packages.\n\npacman::p_load(tidyverse, ggdist, ggthemes, ggridges, colorspace)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex02/In-class_Ex02.html#loading-r-packages",
    "href": "In-class_Ex/In-class_Ex02/In-class_Ex02.html#loading-r-packages",
    "title": "In-class Exercise 2",
    "section": "",
    "text": "In the code chunk below, p_load() of pacman package is used to load tidyverse, ggdist, ggthemes family of packages.\n\npacman::p_load(tidyverse, ggdist, ggthemes, ggridges, colorspace)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex02/In-class_Ex02.html#importing-the-data",
    "href": "In-class_Ex/In-class_Ex02/In-class_Ex02.html#importing-the-data",
    "title": "In-class Exercise 2",
    "section": "2. Importing the data",
    "text": "2. Importing the data\n\nexam &lt;- read_csv(\"data/Exam_data.csv\")"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex02/In-class_Ex02.html#density-plot",
    "href": "In-class_Ex/In-class_Ex02/In-class_Ex02.html#density-plot",
    "title": "In-class Exercise 2",
    "section": "3. Density Plot",
    "text": "3. Density Plot\n\nggplot(data= exam, \n       aes(x = ENGLISH)) +\n  geom_density(\n    color = \"#1696d2\",\n    adjust = .65,\n    alpha = .6\n    )"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex02/In-class_Ex02.html#visualising-distribution-with-ridgeline-plot",
    "href": "In-class_Ex/In-class_Ex02/In-class_Ex02.html#visualising-distribution-with-ridgeline-plot",
    "title": "In-class Exercise 2",
    "section": "4. Visualising Distribution with Ridgeline Plot",
    "text": "4. Visualising Distribution with Ridgeline Plot\nRidgeline plot (sometimes called Joyplot) is a data visualisation technique for revealing the distribution of a numeric value for several groups. Distribution can be represented using histograms or density plots, all aligned to the same horizontal scale and presented with a slight overlap.\nFigure below is a ridgelines plot showing the distribution of English score by class.\n\n\n\n\n\n\n\nNote\n\n\n\n\nRidgeline plots make sense when the number of group to represent is medium to high, and thus a classic window separation would take to much space. Indeed, the fact that groups overlap each other allows to use space more efficiently. If you have less than 5 groups, dealing with other distribution plots is probably better.\nIt works well when there is a clear pattern in the result, like if there is an obvious ranking in groups. Otherwise group will tend to overlap each other, leading to a messy plot not providing any insight.\n\n\n\n\n4.1 Plotting ridgeline graph: ggridges method\nThere are several ways to plot ridgeline plot with R. In this section, you will learn how to plot ridgeline plot by using ggridges package.\nggridges package provides two main geom to plot gridgeline plots, they are: geom_ridgeline() and geom_density_ridges(). The former takes height values directly to draw the ridgelines, and the latter first estimates data densities and then draws those using ridgelines.\nThe ridgeline plot below is plotted by using geom_density_ridges().\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(exam, \n       aes(x = ENGLISH, \n           y = CLASS)) +\n  geom_density_ridges(\n    scale = 3,\n    rel_min_height = 0.01,\n    bandwidth = 3.4,\n    fill = lighten(\"#7097BB\", .3),\n    color = \"white\"\n  ) +\n  scale_x_continuous(\n    name = \"English grades\",\n    expand = c(0, 0)\n    ) +\n  scale_y_discrete(name = NULL, expand = expansion(add = c(0.2, 2.6))) +\n  theme_ridges()\n\n\n\n\n\n\n4.2 Varying fill colors along the x axis\nSometimes we would like to have the area under a ridgeline not filled with a single solid color but rather with colors that vary in some form along the x axis. This effect can be achieved by using either geom_ridgeline_gradient() or geom_density_ridges_gradient(). Both geoms work just like geom_ridgeline() and geom_density_ridges(), except that they allow for varying fill colors. However, they do not allow for alpha transparency in the fill. For technical reasons, we can have changing fill colors or transparency but not both.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(exam, \n       aes(x = ENGLISH, \n           y = CLASS,\n           fill = stat(x))) +\n  geom_density_ridges_gradient(\n    scale = 3,\n    rel_min_height = 0.01) +\n  scale_fill_viridis_c(name = \"Temp. [F]\",\n                       option = \"C\") +\n  scale_x_continuous(\n    name = \"English grades\",\n    expand = c(0, 0)\n  ) +\n  scale_y_discrete(name = NULL, expand = expansion(add = c(0.2, 2.6))) +\n  theme_ridges()\n\n\n\n\n\n\n4.3 Mapping the probabilities directly onto colour\nBeside providing additional geom objects to support the need to plot ridgeline plot, ggridges package also provides a stat function called stat_density_ridges() that replaces stat_density() of ggplot2.\nFigure below is plotted by mapping the probabilities calculated by using stat(ecdf) which represent the empirical cumulative density function for the distribution of English score.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(exam,\n       aes(x = ENGLISH, \n           y = CLASS, \n           fill = 0.5 - abs(0.5-stat(ecdf)))) +\n  stat_density_ridges(geom = \"density_ridges_gradient\", \n                      calc_ecdf = TRUE) +\n  scale_fill_viridis_c(name = \"Tail probability\",\n                       direction = -1) +\n  theme_ridges()\n\n\n\n\n\n\n\n\n\n\nImportant\n\n\n\nIt is important include the argument calc_ecdf = TRUE in stat_density_ridges().\n\n\n\n\n4.4 Mapping the probabilities directly onto colour\nBy using geom_density_ridges_gradient(), we can colour the ridgeline plot by quantile, via the calculated stat(quantile) aesthetic as shown in the figure below.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(exam,\n       aes(x = ENGLISH, \n           y = CLASS, \n           fill = factor(stat(quantile))\n           )) +\n  stat_density_ridges(\n    geom = \"density_ridges_gradient\",\n    calc_ecdf = TRUE, \n    quantiles = 4,\n    quantile_lines = TRUE) +\n  scale_fill_viridis_d(name = \"Quartiles\") +\n  theme_ridges()\n\n\n\n\nInstead of using number to define the quantiles, we can also specify quantiles by cut points such as 2.5% and 97.5% tails to colour the ridgeline plot as shown in the figure below.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(exam,\n       aes(x = ENGLISH, \n           y = CLASS, \n           fill = factor(stat(quantile))\n           )) +\n  stat_density_ridges(\n    geom = \"density_ridges_gradient\",\n    calc_ecdf = TRUE, \n    quantiles = c(0.025, 0.975)\n    ) +\n  scale_fill_manual(\n    name = \"Probability\",\n    values = c(\"#FF0000A0\", \"#A0A0A0A0\", \"#0000FFA0\"),\n    labels = c(\"(0, 0.025]\", \"(0.025, 0.975]\", \"(0.975, 1]\")\n  ) +\n  theme_ridges()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html",
    "title": "Hands-on Exercise 2",
    "section": "",
    "text": "In this chapter, you will be introduced to several ggplot2 extensions for creating more elegant and effective statistical graphics. By the end of this exercise, you will be able to:\ncontrol the placement of annotation on a graph by using functions provided in ggrepel package, create professional publication quality figure by using functions provided in ggthemes and hrbrthemes packages, plot composite figure by combining ggplot2 graphs by using patchwork package."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#installing-and-loading-the-required-libraries",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#installing-and-loading-the-required-libraries",
    "title": "Hands-on Exercise 2",
    "section": "2.2.1 Installing and loading the required libraries",
    "text": "2.2.1 Installing and loading the required libraries\nIn this exercise, beside tidyverse, four R packages will be used. They are:\n\nggrepel: an R package provides geoms for ggplot2 to repel overlapping text labels.\nggthemes: an R package provides some extra themes, geoms, and scales for ‘ggplot2’.\nhrbrthemes: an R package provides typography-centric themes and theme components for ggplot2.\npatchwork: an R package for preparing composite figure created using ggplot2. Code chunk below will be used to check if these packages have been installed and also will load them onto your working R environment.\n\n\npacman::p_load(ggrepel, patchwork, \n               ggthemes, hrbrthemes,\n               tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#importing-data",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#importing-data",
    "title": "Hands-on Exercise 2",
    "section": "2.2.2 Importing Data",
    "text": "2.2.2 Importing Data\nFor the purpose of this exercise, a data file called Exam_data will be used. It consists of year end examination grades of a cohort of primary 3 students from a local school. It is in csv file format.\nThe code chunk below imports exam_data.csv into R environment by using read_csv() function of readr package. readr is one of the tidyverse package.\n\nexam_data &lt;- read_csv(\"data/Exam_data.csv\")\n\n\nThere are a total of seven attributes in the exam_data tibble data frame. Four of them are categorical data type and the other three are in continuous data type.\nThe categorical attributes are: ID, CLASS, GENDER and RACE. The continuous attributes are: MATHS, ENGLISH and SCIENCE."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#working-with-ggrepel",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#working-with-ggrepel",
    "title": "Hands-on Exercise 2",
    "section": "Working with ggrepel",
    "text": "Working with ggrepel\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  geom_label_repel(aes(label = ID), \n                   fontface = \"bold\") +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#working-with-ggtheme-package",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#working-with-ggtheme-package",
    "title": "Hands-on Exercise 2",
    "section": "2.4.1 Working with ggtheme package",
    "text": "2.4.1 Working with ggtheme package\nggthemes provides ‘ggplot2’ themes that replicate the look of plots by Edward Tufte, Stephen Few, Fivethirtyeight, The Economist, ‘Stata’, ‘Excel’, and The Wall Street Journal, among others. In the example below, The Economist theme is used.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_economist() \n\n\n\n\nIt also provides some extra geoms and scales for ‘ggplot2’. Consult this vignette to learn more."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#working-with-hrbthems-package",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#working-with-hrbthems-package",
    "title": "Hands-on Exercise 2",
    "section": "Working with hrbthems package",
    "text": "Working with hrbthems package\nhrbrthemes package provides a base theme that focuses on typographic elements, including where various labels are placed as well as the fonts that are used.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_ipsum()\n\n\n\n\nThe second goal centers around productivity for a production workflow. In fact, this “production workflow” is the context for where the elements of hrbrthemes should be used. Consult this vignette to learn more.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_ipsum(axis_title_size = 18,\n              base_size = 15,\n              grid = \"Y\")\n\n\n\n\n\n\n\n\n\n\nWhat can we learn from the code chunk above?\n\n\n\n\naxis_title_size argument is used to increase the font size of the axis title to 18,\nbase_size argument is used to increase the default axis label to 15, and\ngrid argument is used to remove the x-axis grid lines."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#creating-composite-graphics-pathwork-methods",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#creating-composite-graphics-pathwork-methods",
    "title": "Hands-on Exercise 2",
    "section": "2.5.1 Creating Composite Graphics: pathwork methods",
    "text": "2.5.1 Creating Composite Graphics: pathwork methods\nThere are several ggplot2 extension’s functions support the needs to prepare composite figure by combining several graphs such as grid.arrange() of gridExtra package and plot_grid() of cowplot package. In this section, I am going to shared with you an ggplot2 extension called patchwork which is specially designed for combining separate ggplot2 graphs into a single figure.\nPatchwork package has a very simple syntax where we can create layouts super easily. Here’s the general syntax that combines:\n\nTwo-Column Layout using the Plus Sign +.\nParenthesis () to create a subplot group.\nTwo-Row Layout using the Division Sign /"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#combining-two-ggplot2-graphs",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#combining-two-ggplot2-graphs",
    "title": "Hands-on Exercise 2",
    "section": "2.5.2 Combining two ggplot2 graphs",
    "text": "2.5.2 Combining two ggplot2 graphs\nFigure in the tabset below shows a composite of two histograms created using patchwork. Note how simple the syntax used to create the plot!\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\n\n\n\np1+p2"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#combining-three-ggplot2-graphs",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#combining-three-ggplot2-graphs",
    "title": "Hands-on Exercise 2",
    "section": "2.5.3 Combining three ggplot2 graphs",
    "text": "2.5.3 Combining three ggplot2 graphs\nWe can plot more complex composite by using appropriate operators. For example, the composite figure below is plotted by using:\n\n“|” operator to stack two ggplot2 graphs,\n“/” operator to place the plots beside each other,\n“()” operator the define the sequence of the plotting.\n\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n((p1 / p2) | p3) & theme(plot.title = element_text(size=9))\n\n\n\n\nTo learn more about, refer to Plot Assembly."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#creating-a-composite-figure-with-tag",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#creating-a-composite-figure-with-tag",
    "title": "Hands-on Exercise 2",
    "section": "2.5.4 Creating a composite figure with tag",
    "text": "2.5.4 Creating a composite figure with tag\nIn order to identify subplots in text, patchwork also provides auto-tagging capabilities as shown in the figure below.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n((p1 / p2) | p3) + \n  plot_annotation(tag_levels = 'I')"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#creating-figure-with-insert",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#creating-figure-with-insert",
    "title": "Hands-on Exercise 2",
    "section": "2.5.5 Creating figure with insert",
    "text": "2.5.5 Creating figure with insert\nBeside providing functions to place plots next to each other based on the provided layout. With inset_element() of patchwork, we can place one or several plots or graphic elements freely on top or below another plot.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\n\n\n\np3 + inset_element(p2, \n                   left = 0.02, \n                   bottom = 0.7, \n                   right = 0.5, \n                   top = 1)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#creating-a-composite-figure-by-using-patchwork-and-ggtheme",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#creating-a-composite-figure-by-using-patchwork-and-ggtheme",
    "title": "Hands-on Exercise 2",
    "section": "2.5.6 Creating a composite figure by using patchwork and ggtheme",
    "text": "2.5.6 Creating a composite figure by using patchwork and ggtheme\nFigure below is created by combining patchwork and theme_economist() of ggthemes package discussed earlier.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\n\n\n\npatchwork &lt;- (p1 / p2) | p3\npatchwork & theme_economist() & theme(plot.title = element_text(size=8))"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "Thet Myat Noe",
    "section": "",
    "text": "Thet is currently studying Master of IT in Business at SMU, specializing in analytics track.\n\n\nNanyang Technological University, Singapore\nB.Eng in Materials Engineering | 2012 - 2015\n\n\n\nAMD | Senior Packaging Engineer | May 2022 - present\nMicron Technology | Senior Engineer | Feb 2015 - May 2022\n\n \n  \n   \n  \n    \n     linkedin"
  },
  {
    "objectID": "about.html#education",
    "href": "about.html#education",
    "title": "Thet Myat Noe",
    "section": "",
    "text": "Nanyang Technological University, Singapore\nB.Eng in Materials Engineering | 2012 - 2015"
  },
  {
    "objectID": "about.html#experience",
    "href": "about.html#experience",
    "title": "Thet Myat Noe",
    "section": "",
    "text": "AMD | Senior Packaging Engineer | May 2022 - present\nMicron Technology | Senior Engineer | Feb 2015 - May 2022"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html",
    "title": "Hands-on Exercise 1",
    "section": "",
    "text": "The code chunk below uses p_load() of pacman package to check if tidyverse packages are installed in computer. If they are, then they will be launched into R.\n\npacman::p_load(tidyverse)\n\n\n\n\n\nexam_data &lt;- read_csv(\"data/Exam_data.csv\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#install-and-launching-r-packages",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#install-and-launching-r-packages",
    "title": "Hands-on Exercise 1",
    "section": "",
    "text": "The code chunk below uses p_load() of pacman package to check if tidyverse packages are installed in computer. If they are, then they will be launched into R.\n\npacman::p_load(tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#importing-the-data",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#importing-the-data",
    "title": "Hands-on Exercise 1",
    "section": "",
    "text": "exam_data &lt;- read_csv(\"data/Exam_data.csv\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#using-stat_summary",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#using-stat_summary",
    "title": "Hands-on Exercise 1",
    "section": "using stat_summary()",
    "text": "using stat_summary()\n\nggplot(data=exam_data, \n       aes(y = MATHS, x= GENDER)) +\n  geom_boxplot() +\n  stat_summary(geom = \"point\",       \n               fun =\"mean\",         \n               colour =\"red\",        \n               size=4)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#using-geom",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#using-geom",
    "title": "Hands-on Exercise 1",
    "section": "using geom()",
    "text": "using geom()\n\nggplot(data=exam_data, \n       aes(y = MATHS, x= GENDER)) +\n  geom_boxplot() +\n  geom_point(stat=\"summary\",        \n             fun=\"mean\",           \n             colour =\"red\",          \n             size=4)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#using-default-smoothing-loess",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#using-default-smoothing-loess",
    "title": "Hands-on Exercise 1",
    "section": "Using default smoothing: loess",
    "text": "Using default smoothing: loess\n\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(linewidth =0.5)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#using-linear-model-smoothing",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#using-linear-model-smoothing",
    "title": "Hands-on Exercise 1",
    "section": "Using linear model smoothing",
    "text": "Using linear model smoothing\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#vertical",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#vertical",
    "title": "Hands-on Exercise 1",
    "section": "Vertical",
    "text": "Vertical\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#horizontal",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#horizontal",
    "title": "Hands-on Exercise 1",
    "section": "Horizontal",
    "text": "Horizontal\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#original",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#original",
    "title": "Hands-on Exercise 1",
    "section": "Original",
    "text": "Original\n\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, size=0.5)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#change-limit-to-x-100-y-100",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#change-limit-to-x-100-y-100",
    "title": "Hands-on Exercise 1",
    "section": "Change limit to x = 100, y = 100",
    "text": "Change limit to x = 100, y = 100\n\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#theme_gray",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#theme_gray",
    "title": "Hands-on Exercise 1",
    "section": "theme_gray()",
    "text": "theme_gray()\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_gray()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#theme_classic",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#theme_classic",
    "title": "Hands-on Exercise 1",
    "section": "theme_classic()",
    "text": "theme_classic()\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_classic()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#theme_minimal",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#theme_minimal",
    "title": "Hands-on Exercise 1",
    "section": "theme_minimal()",
    "text": "theme_minimal()\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_minimal()"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex01/In-class_Ex01.html",
    "href": "In-class_Ex/In-class_Ex01/In-class_Ex01.html",
    "title": "In-Class Exercise 1",
    "section": "",
    "text": "In the code chunk below, p_load() of pacman package is used to load tidyverse family of packages.\n\npacman::p_load(tidyverse)\n\n\nrealis &lt;- read_csv(\"data/realis2019.csv\")\n\n\nrealis.csv &lt;- read.csv(\"data/realis2019.csv\")\n\n\nggplot(data = realis, \n       aes(x = `Unit Price ($ psm)`)) +\n  geom_histogram()"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex01/In-class_Ex01.html#loading-r-packages",
    "href": "In-class_Ex/In-class_Ex01/In-class_Ex01.html#loading-r-packages",
    "title": "In-Class Exercise 1",
    "section": "",
    "text": "In the code chunk below, p_load() of pacman package is used to load tidyverse family of packages.\n\npacman::p_load(tidyverse)\n\n\nrealis &lt;- read_csv(\"data/realis2019.csv\")\n\n\nrealis.csv &lt;- read.csv(\"data/realis2019.csv\")\n\n\nggplot(data = realis, \n       aes(x = `Unit Price ($ psm)`)) +\n  geom_histogram()"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "ISSS608-VAA",
    "section": "",
    "text": "Welcome to ISSS608 Visual Analytics and Applications. In this website, you will find my coursework prepared for this course."
  },
  {
    "objectID": "In-class_Ex/In-class_Ex02/In-class_Ex02.html#isualising-distribution-with-raincloud-plot",
    "href": "In-class_Ex/In-class_Ex02/In-class_Ex02.html#isualising-distribution-with-raincloud-plot",
    "title": "In-class Exercise 2",
    "section": "5. isualising Distribution with Raincloud Plot",
    "text": "5. isualising Distribution with Raincloud Plot\naincloud Plot is a data visualisation techniques that produces a half-density to a distribution plot. It gets the name because the density plot is in the shape of a “raincloud”. The raincloud (half-density) plot enhances the traditional box-plot by highlighting multiple modalities (an indicator that groups may exist). The boxplot does not show where densities are clustered, but the raincloud plot does!\nIn this section, you will learn how to create a raincloud plot to visualise the distribution of English score by race. It will be created by using functions provided by ggdist and ggplot2 packages.\n\n5.1 Plotting a Half Eye graph\nFirst, we will plot a Half-Eye graph by using stat_halfeye() of ggdist package.\nThis produces a Half Eye visualization, which is contains a half-density and a slab-interval.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA)\n\n\n\n\n\n\n\n\n\n\nThings to learn from the code chunk above\n\n\n\nWe remove the slab interval by setting .width = 0 and point_colour = NA.\n\n\n\n\n5.2 Adding the boxplot with geom_boxplot()\nNext, we will add the second geometry layer using geom_boxplot() of ggplot2. This produces a narrow boxplot. We reduce the width and adjust the opacity.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA)\n\n\n\n\n\n\n5.3 Adding the Dot Plots with stat_dots()\nNext, we will add the third geometry layer using stat_dots() of ggdist package. This produces a half-dotplot, which is similar to a histogram that indicates the number of samples (number of dots) in each bin. We select side = “left” to indicate we want it on the left-hand side.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA) +\n  stat_dots(side = \"left\", \n            justification = 1.2, \n            binwidth = .5,\n            dotsize = 2)\n\n\n\n\n\n\n5.4 Finishing touch\nLastly, coord_flip() of ggplot2 package will be used to flip the raincloud chart horizontally to give it the raincloud appearance. At the same time, theme_economist() of ggthemes package is used to give the raincloud chart a professional publishing standard look.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA) +\n  stat_dots(side = \"left\", \n            justification = 1.2, \n            binwidth = .5,\n            dotsize = 1.5) +\n  coord_flip() +\n  theme_economist()"
  }
]