{
  "hash": "c9481ced92c94b4d87acc476dde1602e",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Take-home Exercise 3\"\nauthor: \"Thet Myat Noe\"\ndate: \"May 14, 2024\"\ndate-modified: \"last-modified\"\ncode-fold: true\nexecute:\n  eval: true\n  echo: true\n  warning: false\n  freeze: true\n---\n\n\n![](fishing.gif){width=\"800\" height=\"500\"} source: Dribble.com\n\n# 1. Overview\n\n## 1.1 Setting the scene\n\nVast Challenge also known as IEEE Visual Analytics Science and Technology (VAST) Challenge is Visual Analytics competition which aims to promote innovation in the field of data transformation and interactive visualization. Vast Challenge 2024 is based on the theme of detecting bias, illegal fishing behavior and temporal patterns in fishing industry in Oceanus, an island nation.\n\n## 1.2 Task\n\nThis exercise will be based on Mini-Challenge 2:[MC2](https://vast-challenge.github.io/2024/MC2.html) of Vast Challenge 2024. The objective of the exercise is to help FishEye, a non-profit organization to detect and prevent illegal fishing behaviour, by performing geographic and temporal visual analysis. This exercise will aim to answer the following questions from MC2 of Vast Challenge through visual analytics:\n\n**Question 1:**\n\n::: {style=\"border: 2px dotted black; background-color: #e6e6fa; padding: 15px; margin: 10px 0; border-radius: 5px; display: flex; align-items: center;\"}\n<img src=\"fish_1826379.png\" alt=\"Icon\" style=\"width: 48px; height: 48px; margin-right: 10px;\"/> Develop visualizations that illustrate the inappropriate behavior of SouthSeafood Express Corp vessels. FishEye analysts have long wanted to better understand the flow of commercially caught fish through Oceanus’s many ports. But as they were loading data into CatchNet, they discovered they had purchased the wrong port records. They wanted to get the ship off-load records, but they instead got the port-exit records (essentially trucks/trains leaving the port area). Port exit records do not include which vessel that delivered the products. Given this limitation, develop a visualization system to associate vessels with their probable cargos. Which vessels deliver which products and when? What are the seasonal trends and anomalies in the port exit records?.\n:::\n\n**Question 2:**\n\n::: {style=\"border: 2px dotted black; background-color: #e6e6fa; padding: 15px; margin: 10px 0; border-radius: 5px; display: flex; align-items: center;\"}\n<img src=\"shark_1826583.png\" alt=\"Icon\" style=\"width: 48px; height: 48px; margin-right: 10px;\"/> Develop visualizations that illustrate the inappropriate behavior of SouthSeafood Express Corp vessels. How do their movement and catch contents compare to other fishing vessels? When and where did SouthSeafood Express Corp vessels perform their illegal fishing? How many different types of suspicious behaviors are observed? Use visual evidence to justify your conclusions.\n:::\n\n# 2. Getting Started\n\n## 2.1 Installing and loading the required libraries\n\nThe code chunk below uses `p_load()` function from **pacman** package to check if packages listed are already installed in the computer. The packages are loaded if they are found to be installed. If they are not installed, the function will proceed to install and load them into R environment.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(jsonlite,tidyverse,igraph,ggraph)\n```\n:::\n\n\n## 2.2 Importing Data\n\nBelow code import MC2 data using fromJSON command from jsonlite package.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmc2_data <- fromJSON(\"data/MC2/mc2.json\")\n```\n:::\n\n\n### 2.2.1 Processing Edges/Links Data\n\nBelow code process and clean Edges data.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load edges data to mc2_edges\nmc2_edges <- as_tibble(mc2_data$links) %>% \n  distinct() \n\n# Correcting date data type using lubridate package\nmc2_edges$time <- as_datetime(mc2_edges$time)\nmc2_edges$\"_last_edited_date\" <- as_datetime(mc2_edges$\"_last_edited_date\")\nmc2_edges$\"_date_added\" <- as_datetime(mc2_edges$\"_date_added\")\nmc2_edges$date <- as.POSIXct(mc2_edges$date, format = \"%Y-%m-%d\")\n\n# Updating field names\nmc2_edges <- mc2_edges %>%\n  rename(\"last_edited_by\" = \"_last_edited_by\",\n         \"date_added\" = \"_date_added\",\n         \"last_edited_date\" = \"_last_edited_date\",\n         \"raw_source\" = \"_raw_source\",\n         \"algorithm\" = \"_algorithm\")\n\n# Divide different events into different table\nE_TransponderPing <- subset(mc2_edges,  mc2_edges$type == \"Event.TransportEvent.TransponderPing\")\nE_HarborRpt <- subset(mc2_edges,  mc2_edges$type == \"Event.HarborReport\")\nE_Tx <- subset(mc2_edges, mc2_edges$type == \"Event.Transaction\")\n```\n:::\n\n\nTake a look at mc2_edges to ensure data is processed correctly.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(mc2_edges)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 271,643\nColumns: 17\n$ type                <chr> \"Event.TransportEvent.TransponderPing\", \"Event.Tra…\n$ time                <dttm> 2035-09-16 04:06:48, 2035-09-20 05:21:33, 2035-09…\n$ dwell               <dbl> 115074.79, 412706.32, 286092.88, 327623.95, 243225…\n$ last_edited_by      <chr> \"Olokun Daramola\", \"Melinda Manning\", \"Olokun Dara…\n$ date_added          <dttm> 2035-09-16 00:59:46, 2035-09-22 02:37:37, 2035-09…\n$ last_edited_date    <dttm> 2035-09-16 00:59:46, 2035-09-22 02:37:37, 2035-10…\n$ raw_source          <chr> \"Oceanus Vessel Locator System\", \"Oceanus Vessel L…\n$ algorithm           <chr> \"OVLS-Catch&Hook\", \"OVLS-Catch&Hook\", \"OVLS-Catch&…\n$ source              <chr> \"City of Haacklee\", \"City of Haacklee\", \"City of H…\n$ target              <chr> \"perchplundererbc0\", \"perchplundererbc0\", \"perchpl…\n$ key                 <int> 0, 1, 2, 3, 4, 5, 6, 7, 8, 0, 1, 2, 3, 4, 5, 6, 7,…\n$ date                <dttm> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ data_author         <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ aphorism            <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ holiday_greeting    <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ wisdom              <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ `saying of the sea` <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n```\n\n\n:::\n:::\n\n\n### 2.2.2 Processing Nodes Data\n\nBelow code process and clean Nodes data.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load nodes data to mc2_nodes\nmc2_nodes <- as_tibble(mc2_data$nodes) %>%\n  distinct()\n\n# Correcting date data type using lubridate package\nmc2_nodes$\"_last_edited_date\" <- as_datetime(mc2_nodes$\"_last_edited_date\")\nmc2_nodes$\"_date_added\" <- as_datetime(mc2_nodes$\"_date_added\")\nmc2_nodes$date <- as.POSIXct(mc2_nodes$date, format = \"%Y-%m-%d\")\n\n# Updating field names\nmc2_nodes <- mc2_nodes %>%\n  rename(\"last_edited_by\" = \"_last_edited_by\",\n         \"date_added\" = \"_date_added\",\n         \"last_edited_date\" = \"_last_edited_date\",\n         \"raw_source\" = \"_raw_source\",\n         \"algorithm\" = \"_algorithm\")\n\n# Divide different nodes into different table\nN_fish <- subset(mc2_nodes,  mc2_nodes$type == \"Entity.Commodity.Fish\") %>%\n  select_if(~ !any(is.na(.))) %>%\n  select(-c(`type`, `raw_source`, `algorithm`, `Activities`, `fish_species_present`)) %>%\n  rename(fish_species = name, \n         fish_id = id)\n\nNL_City <- subset(mc2_nodes,  mc2_nodes$type == \"Entity.Location.City\") %>%\n  select_if(~ !any(is.na(.))) %>%\n  select(-c(`raw_source`, `algorithm`, `type`, `fish_species_present`)) %>%\n  rename(city_name = Name, \n         city_id = id)\n\n\nNL_Point <- subset(mc2_nodes,  mc2_nodes$type == \"Entity.Location.Point\") %>%\n  select_if(~ !any(is.na(.))) %>%\n  select(-c(`raw_source`, `algorithm`, `kind`, `fish_species_present`)) %>%\n  rename(point_name = Name, \n         point_id = id)\n\n# Need to tidy NL Region\nNL_Region <- subset(mc2_nodes,  mc2_nodes$type == \"Entity.Location.Region\") %>%\n  select_if(~ !any(is.na(.))) %>%\n  select(-c(`raw_source`, `algorithm`, `type`, `Description`)) %>%\n  rename(region_name = Name, \n         region_id = id, \n         region_kind = kind)\n\nN_Delivery_doc <- subset(mc2_nodes,  mc2_nodes$type == \"Entity.Document.DeliveryReport\") %>%\n  select_if(~ !any(is.na(.))) %>%\n  rename(deliver_date = date,\n         cargo_id = id) %>%\n  select(-c(`algorithm`, `type`, `raw_source`, `Activities`, `fish_species_present`)) \n\nN_vessel <- mc2_nodes %>%\n  filter(grepl(\"Entity.Vessel\", type)) %>%\n  mutate(vessel_type = case_when(\n    grepl(\"FishingVessel\", type, ignore.case = TRUE) ~ \"Fishing\",\n    grepl(\"Ferry.Passenger\", type, ignore.case = TRUE) ~ \"Ferry_Passenger\",\n    grepl(\"Ferry.Cargo\", type, ignore.case = TRUE) ~ \"Ferry_Cargo\",\n    grepl(\"Research\", type, ignore.case = TRUE) ~ \"Research\", \n    grepl(\"Other\", type, ignore.case = TRUE) ~ \"Other\", \n    grepl(\"Tour\", type, ignore.case = TRUE) ~ \"Tour\", \n    grepl(\"CargoVessel\", type, ignore.case = TRUE) ~ \"Cargo_Vessel\"\n    )) %>%\n  select(-c(`algorithm`, `type`, `raw_source`, `Activities`, `fish_species_present`)) %>%\n  mutate(company = ifelse(is.na(company), \"Unknown\", company)) %>% # Handle NA values by replacing NA with unknown\n  rename(vessel_id = id, \n         vessel_name = Name,\n         vessel_company = company) %>%\n  select_if(~ !any(is.na(.)))\n```\n:::\n\n\nTake a look at mc2_nodes to ensure data is processed correctly.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(mc2_nodes)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 5,637\nColumns: 20\n$ type                 <chr> \"Entity.Commodity.Fish\", \"Entity.Commodity.Fish\",…\n$ last_edited_by       <chr> \"Clepper Jessen\", \"Clepper Jessen\", \"Haenyeo Hyun…\n$ date_added           <dttm> 2033-09-04, 2034-01-21, 2033-06-22, 2033-11-24, …\n$ last_edited_date     <dttm> 2035-01-25, 2035-01-04, 2035-01-14, 2035-01-14, …\n$ raw_source           <chr> \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"Oceanus:…\n$ algorithm            <chr> \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"…\n$ name                 <chr> \"Cod/Gadus n.specificatae\", \"Birdseye/Pisces frig…\n$ id                   <chr> \"gadusnspecificatae4ba\", \"piscesfrigus900\", \"pisc…\n$ Name                 <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, \"Haacklee…\n$ Description          <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ Activities           <list> <NULL>, <NULL>, <NULL>, <NULL>, <NULL>, <NULL>, …\n$ kind                 <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, \"city\", \"…\n$ qty_tons             <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ date                 <dttm> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ flag_country         <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ company              <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ tonnage              <int> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ length_overall       <int> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ style                <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ fish_species_present <list> <NULL>, <NULL>, <NULL>, <NULL>, <NULL>, <NULL>, …\n```\n\n\n:::\n:::\n\n\n### 2.2.3 Processing Transponder Ping Data\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Rename target column as vessel_id\nE_TransponderPing <- E_TransponderPing %>%\n  rename(vessel_id = target)\n\n# Join data tables to include vessel_type, vessel_company in transponder ping data and filter only Fishing vessel type\nE_Tping_Fishing <- E_TransponderPing %>%\n  left_join(N_vessel %>% select(vessel_id, vessel_type, vessel_company), by = \"vessel_id\") %>%\n  filter(vessel_type == \"Fishing\")\n```\n:::\n\n\n# 3. Visualisation\n\n## 3.1.1 Vessels' Possible Delivery Content\n\nFirst, we need to associate Cargo in delivery doc to fish species info using Transaction and Fish Nodes data.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Extract Cargo to Fish data from Transaction Event data\nCargo_to_Fish <- E_Tx %>%\n  filter(target %in% N_fish$fish_id) %>% select(source, target)\n\n# Match Cargo Id in delivery doc to fish Id from Transaction data\nN_Delivery_doc <- N_Delivery_doc %>%\n  left_join(Cargo_to_Fish, by = c(\"cargo_id\" = \"source\"))\n\n# Match Fish Id in delivery doc to fish species from Fish Nodes\nN_Delivery_doc <- N_Delivery_doc %>%\n  left_join(N_fish %>% select(\"fish_id\", \"fish_species\"), by = c(\"target\" = \"fish_id\"))\n\n# Rename Target Column in N_Delivery_doc to Fish Id\nN_Delivery_doc <- N_Delivery_doc %>% \n  rename(fish_id = target)\n```\n:::\n\n\nNext, extract date only from time column of transponder data.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Extract Date only from time column of Transponder Ping data\nE_Tping_Fishing <- E_Tping_Fishing %>%\n  mutate(date_only = as.Date(time))\n```\n:::\n\n\nConnect possible cargo to vessels using date as connection.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Merge the datasets based on the date\nTping_to_Delivery <- E_Tping_Fishing %>%\n  filter(source %in% NL_City$city_id) %>%\n  left_join(N_Delivery_doc %>% select(\"deliver_date\",\"cargo_id\", \"qty_tons\", \"fish_id\", \"fish_species\"), by = c(\"date_only\" = \"deliver_date\"))\n```\n:::\n\n\nVisualize which company possibly deliver which fish species.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Remove duplicate rows based on vessel_company and fish_species\ndistinct_species <- Tping_to_Delivery %>%\n  distinct(vessel_company, fish_species) %>% na.omit() %>% select(vessel_company, fish_species)\n\n# Creating stacked bar chart\nggplot(distinct_species, aes(x = vessel_company, fill = fish_species)) +\n  geom_bar(position = \"stack\") +\n  labs(title = \"Probable Fish Species Delivered by Company\",\n       x = \"Vessel Company\",\n       y = \"Count of Fish Species\") +\n  theme(axis.text.x = element_text(angle = 90, hjust = 1, size = 6),\n        axis.text.y = element_text(size = 8),\n        legend.text = element_text(size = 8),\n        legend.title = element_text(size = 8)) +\n  scale_fill_discrete(name = \"Fish Species\")\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex03_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\n## 3.1.2 Vessels' Possible Delivery Content By Season\n\n## 3.2.1 Transponder Ping Pattern\n\nTransponder ping data can provide the locations the vessels from shipping company has been to and give insight whether vessels have visited non-fishing areas. In this section, we will focus only on fishing vessels to understand fishing activities.\n\nPlot a network graph showing all the shipping vessel movements by different companies\n\n\n::: {.cell}\n\n```{.r .cell-code}\nedges <- data.frame(\n  from = E_Tping_Fishing$vessel_company,\n  to = E_Tping_Fishing$source\n)\n\n# Create a graph object\ngraph <- graph_from_data_frame(edges, directed = FALSE)\n\n# Plot the network\nplot(graph, vertex.size=10, vertex.label.cex=0.8, vertex.label.color=\"black\",\n     main=\"Network Visualization of Vessel Movement\")\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex03_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n\nZoom into SouthSeafood Express Corp's vessel movement to uncover any suspicious behavior.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Filter SouthSeafood Express Corp Vessels Only\nE_Tping_Fishing_SS <- E_Tping_Fishing %>%\n  filter(vessel_company == \"SouthSeafood Express Corp\")\n\nedges_ss <- data.frame(\n  from = E_Tping_Fishing_SS$vessel_company,\n  to = E_Tping_Fishing_SS$source\n)\n\n# Creating graph object\ngraph_ss <- graph_from_data_frame(edges_ss, directed = FALSE)\n\n\n# Distinguish between boats, SouthSeafood, and other companies\nV(graph_ss)$type <- ifelse(V(graph_ss)$name == \"SouthSeafood Express Corp\", \"southseafood\", \n                        ifelse(V(graph)$name %in% E_Tping_Fishing_SS$vessel_id, \"boat\", \"location\"))\n\n# Plot the network with ggraph\nggraph(graph_ss, layout = 'fr') +  \n  geom_edge_link(aes(width = 1), edge_colour = \"grey\") + \n  geom_node_point(aes(color = type), size = 5) + \n  geom_node_text(aes(label = name), repel = TRUE, size = 3, color = \"black\") +  \n  scale_color_manual(values = c(\"boat\" = \"orange\", \"location\" = \"blue\", \"southseafood\" = \"red\")) + \n  theme_void() +  \n  labs(title = \"Network Visualization of SouthSeafood Express Corp Vessel Movement\")  \n```\n\n::: {.cell-output-display}\n![](Take-home_Ex03_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\n## 3.2.2 Catch Content Comparison\n\n# 4. Conclusion\n\n# 5. References\n\n[`Working with Graph Data`](https://isss608-ay2023-24apr.netlify.app/vast/kickstarter2)\n",
    "supporting": [
      "Take-home_Ex03_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}