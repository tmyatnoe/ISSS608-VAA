{
  "hash": "fc301a7d6d928d0e0a0dcfbe0bee78cd",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Take-home Exercise 3\"\nauthor: \"Thet Myat Noe\"\ndate: \"May 14, 2024\"\ndate-modified: \"last-modified\"\ncode-fold: true\nexecute:\n  eval: true\n  echo: true\n  warning: false\n  freeze: true\n---\n\n\n![](fishing.gif){width=\"800\" height=\"500\"} source: Dribble.com\n\n# 1. Overview\n\n## 1.1 Setting the scene\n\n**Vast Challenge** also known as IEEE Visual Analytics Science and Technology (VAST) Challenge is Visual Analytics competition which aims to promote innovation in the field of data transformation and interactive visualization. [Vast Challenge 2024](https://vast-challenge.github.io/2024/index.html) is based on the theme of detecting bias, illegal fishing behavior and temporal patterns in fishing industry in Oceanus, an island nation.\n\n## 1.2 Task\n\nThis exercise will be based on **Mini-Challenge 2: [MC2](https://vast-challenge.github.io/2024/MC2.html)** of Vast Challenge 2024. The objective of the exercise is to help FishEye, a non-profit organization to detect and prevent illegal fishing behaviour, by performing geographic and temporal visual analysis. This exercise will aim to answer the following questions from MC2 of Vast Challenge through visual analytics:\n\n**Question 1:**\n\n::: {style=\"border: 2px dotted black; background-color: #e6e6fa; padding: 15px; margin: 10px 0; border-radius: 5px; display: flex; align-items: center;\"}\n<img src=\"fish_1826379.png\" alt=\"Icon\" style=\"width: 48px; height: 48px; margin-right: 10px;\"/> Develop visualizations that illustrate the inappropriate behavior of SouthSeafood Express Corp vessels. FishEye analysts have long wanted to better understand the flow of commercially caught fish through Oceanus’s many ports. But as they were loading data into CatchNet, they discovered they had purchased the wrong port records. They wanted to get the ship off-load records, but they instead got the port-exit records (essentially trucks/trains leaving the port area). Port exit records do not include which vessel that delivered the products. Given this limitation, develop a visualization system to associate vessels with their probable cargos. Which vessels deliver which products and when? What are the seasonal trends and anomalies in the port exit records?.\n:::\n\n**Question 2:**\n\n::: {style=\"border: 2px dotted black; background-color: #e6e6fa; padding: 15px; margin: 10px 0; border-radius: 5px; display: flex; align-items: center;\"}\n<img src=\"shark_1826583.png\" alt=\"Icon\" style=\"width: 48px; height: 48px; margin-right: 10px;\"/> Develop visualizations that illustrate the inappropriate behavior of SouthSeafood Express Corp vessels. How do their movement and catch contents compare to other fishing vessels? When and where did SouthSeafood Express Corp vessels perform their illegal fishing? How many different types of suspicious behaviors are observed? Use visual evidence to justify your conclusions.\n:::\n\n# 2. Getting Started\n\n## 2.1 Installing and loading the required libraries\n\n| Package                                                                         | Description                                                                                                                           |\n|-------------------------|-----------------------------------------------|\n| [jsonlite](https://cran.r-project.org/web/packages/jsonlite/index.html)         | Fast JSON parser and generator, optimized for statistical data and the web. Offers simple, flexible tools for working with JSON in R. |\n| [tidyverse](https://www.tidyverse.org/)                                         | Used for data import, tidying, manipulation, and data visualization. Packages like readr, dplyr, lubridate are part of tidyverse.     |\n| [igraph](https://igraph.org/)                                                   | Used for network analysis.                                                                                                            |\n| [ggraph](https://ggraph.data-imaginist.com/)                                    | Extension of ggplot2 intended for using with networks, graphs and trees.                                                              |\n| [RColorBrewer](https://cran.r-project.org/web/packages/RColorBrewer/index.html) | Color schemes for plots.                                                                                                              |\n| [sf](https://cran.r-project.org/web/packages/sf/index.html)                     | Used for encoding spatial vector data.                                                                                                |\n| [plotly](https://plotly.com/r/)                                                 | Used for interactive, publication quality charts.                                                                                     |\n\nThe code chunk below uses `p_load()` function from **pacman** package to check if packages listed are already installed in the computer. The packages are loaded if they are found to be installed. If they are not installed, the function will proceed to install and load them into R environment.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(jsonlite,tidyverse,igraph,ggraph,RColorBrewer,sf,plotly)\n```\n:::\n\n\n## 2.2 Importing Data\n\nBelow code import MC2 data using `fromJSON()` command from **jsonlite** package.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmc2_data <- fromJSON(\"data/MC2/mc2.json\")\n```\n:::\n\n\n### 2.2.1 Processing Edges/Links Data\n\nBelow code process and clean Edges data.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load edges data to mc2_edges\nmc2_edges <- as_tibble(mc2_data$links) %>% \n  distinct() \n\n# Correcting date data type using lubridate package\nmc2_edges$time <- as_datetime(mc2_edges$time)\nmc2_edges$\"_last_edited_date\" <- as_datetime(mc2_edges$\"_last_edited_date\")\nmc2_edges$\"_date_added\" <- as_datetime(mc2_edges$\"_date_added\")\nmc2_edges$date <- as.POSIXct(mc2_edges$date, format = \"%Y-%m-%d\")\n\n# Updating field names\nmc2_edges <- mc2_edges %>%\n  rename(\"last_edited_by\" = \"_last_edited_by\",\n         \"date_added\" = \"_date_added\",\n         \"last_edited_date\" = \"_last_edited_date\",\n         \"raw_source\" = \"_raw_source\",\n         \"algorithm\" = \"_algorithm\")\n\n# Divide different events into different table\nE_TransponderPing <- subset(mc2_edges,  mc2_edges$type == \"Event.TransportEvent.TransponderPing\")\nE_HarborRpt <- subset(mc2_edges,  mc2_edges$type == \"Event.HarborReport\")\nE_Tx <- subset(mc2_edges, mc2_edges$type == \"Event.Transaction\")\n\n# save mc2_edges into R rds file format\nwrite_rds(mc2_edges, \"data/rds/mc2_edges.rds\")\n```\n:::\n\n\nTake a look at **mc2_edges** to ensure data is processed correctly.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(mc2_edges)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 271,643\nColumns: 17\n$ type                <chr> \"Event.TransportEvent.TransponderPing\", \"Event.Tra…\n$ time                <dttm> 2035-09-16 04:06:48, 2035-09-20 05:21:33, 2035-09…\n$ dwell               <dbl> 115074.79, 412706.32, 286092.88, 327623.95, 243225…\n$ last_edited_by      <chr> \"Olokun Daramola\", \"Melinda Manning\", \"Olokun Dara…\n$ date_added          <dttm> 2035-09-16 00:59:46, 2035-09-22 02:37:37, 2035-09…\n$ last_edited_date    <dttm> 2035-09-16 00:59:46, 2035-09-22 02:37:37, 2035-10…\n$ raw_source          <chr> \"Oceanus Vessel Locator System\", \"Oceanus Vessel L…\n$ algorithm           <chr> \"OVLS-Catch&Hook\", \"OVLS-Catch&Hook\", \"OVLS-Catch&…\n$ source              <chr> \"City of Haacklee\", \"City of Haacklee\", \"City of H…\n$ target              <chr> \"perchplundererbc0\", \"perchplundererbc0\", \"perchpl…\n$ key                 <int> 0, 1, 2, 3, 4, 5, 6, 7, 8, 0, 1, 2, 3, 4, 5, 6, 7,…\n$ date                <dttm> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ data_author         <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ aphorism            <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ holiday_greeting    <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ wisdom              <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ `saying of the sea` <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n```\n\n\n:::\n:::\n\n\n### 2.2.2 Processing Nodes Data\n\nBelow code process and clean Nodes data.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load nodes data to mc2_nodes\nmc2_nodes <- as_tibble(mc2_data$nodes) %>%\n  distinct()\n\n# Correcting date data type using lubridate package\nmc2_nodes$\"_last_edited_date\" <- as_datetime(mc2_nodes$\"_last_edited_date\")\nmc2_nodes$\"_date_added\" <- as_datetime(mc2_nodes$\"_date_added\")\nmc2_nodes$date <- as.POSIXct(mc2_nodes$date, format = \"%Y-%m-%d\")\n\n# Updating field names\nmc2_nodes <- mc2_nodes %>%\n  rename(\"last_edited_by\" = \"_last_edited_by\",\n         \"date_added\" = \"_date_added\",\n         \"last_edited_date\" = \"_last_edited_date\",\n         \"raw_source\" = \"_raw_source\",\n         \"algorithm\" = \"_algorithm\")\n\n# Tidy column contents\nmc2_nodes <- mc2_nodes %>%\n  mutate(Activities = gsub(\"c[(]\", \"\", Activities)) %>% \n  mutate(Activities = gsub(\"\\\"\", \"\", Activities)) %>%\n  mutate(Activities = gsub(\"[)]\", \"\", Activities)) \n\nmc2_nodes <- mc2_nodes %>%\n  mutate(fish_species_present = gsub(\"c[(]\", \"\", fish_species_present)) %>% \n  mutate(fish_species_present = gsub(\"\\\"\", \"\", fish_species_present)) %>%\n  mutate(fish_species_present = gsub(\"[)]\", \"\", fish_species_present)) \n\n# Divide different nodes into different dataset\nN_fish <- subset(mc2_nodes,  mc2_nodes$type == \"Entity.Commodity.Fish\") %>%\n  select_if(~ !any(is.na(.))) %>%\n  select(-c(`type`, `raw_source`, `algorithm`, `Activities`, `fish_species_present`)) %>%\n  rename(fish_species = name, \n         fish_id = id)\n\nNL_City <- subset(mc2_nodes,  mc2_nodes$type == \"Entity.Location.City\") %>%\n  select_if(~ !any(is.na(.))) %>%\n  select(-c(`raw_source`, `algorithm`, `type`, `fish_species_present`)) %>%\n  rename(city_name = Name, \n         city_id = id)\n\n\nNL_Point <- subset(mc2_nodes,  mc2_nodes$type == \"Entity.Location.Point\") %>%\n  select_if(~ !any(is.na(.))) %>%\n  select(-c(`raw_source`, `algorithm`, `kind`, `fish_species_present`)) %>%\n  rename(point_name = Name, \n         point_id = id)\n\nNL_Region <- subset(mc2_nodes,  mc2_nodes$type == \"Entity.Location.Region\") %>%\n  select_if(~ !any(is.na(.))) %>%\n  select(-c(`raw_source`, `algorithm`, `type`, `Description`)) %>%\n  rename(region_name = Name, \n         region_id = id, \n         region_kind = kind)\n\nN_Delivery_doc <- subset(mc2_nodes,  mc2_nodes$type == \"Entity.Document.DeliveryReport\") %>%\n  select_if(~ !any(is.na(.))) %>%\n  rename(deliver_date = date,\n         cargo_id = id) %>%\n  select(-c(`algorithm`, `type`, `raw_source`, `Activities`, `fish_species_present`)) \n\nN_vessel <- mc2_nodes %>%\n  filter(grepl(\"Entity.Vessel\", type)) %>%\n  mutate(vessel_type = case_when(\n    grepl(\"FishingVessel\", type, ignore.case = TRUE) ~ \"Fishing\",\n    grepl(\"Ferry.Passenger\", type, ignore.case = TRUE) ~ \"Ferry_Passenger\",\n    grepl(\"Ferry.Cargo\", type, ignore.case = TRUE) ~ \"Ferry_Cargo\",\n    grepl(\"Research\", type, ignore.case = TRUE) ~ \"Research\", \n    grepl(\"Other\", type, ignore.case = TRUE) ~ \"Other\", \n    grepl(\"Tour\", type, ignore.case = TRUE) ~ \"Tour\", \n    grepl(\"CargoVessel\", type, ignore.case = TRUE) ~ \"Cargo_Vessel\"\n    )) %>%\n  select(-c(`algorithm`, `type`, `raw_source`, `Activities`, `fish_species_present`)) %>%\n  mutate(company = ifelse(is.na(company), \"Unknown\", company)) %>% # Handle NA values by replacing NA with unknown\n  rename(vessel_id = id, \n         vessel_name = Name,\n         vessel_company = company) %>%\n  select_if(~ !any(is.na(.)))\n\n# save mc2_nodes into R rds file format\nwrite_rds(mc2_nodes, \"data/rds/mc2_nodes.rds\")\n```\n:::\n\n\nTake a look at **mc2_nodes** to ensure data is processed correctly.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(mc2_nodes)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 5,637\nColumns: 20\n$ type                 <chr> \"Entity.Commodity.Fish\", \"Entity.Commodity.Fish\",…\n$ last_edited_by       <chr> \"Clepper Jessen\", \"Clepper Jessen\", \"Haenyeo Hyun…\n$ date_added           <dttm> 2033-09-04, 2034-01-21, 2033-06-22, 2033-11-24, …\n$ last_edited_date     <dttm> 2035-01-25, 2035-01-04, 2035-01-14, 2035-01-14, …\n$ raw_source           <chr> \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"Oceanus:…\n$ algorithm            <chr> \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"…\n$ name                 <chr> \"Cod/Gadus n.specificatae\", \"Birdseye/Pisces frig…\n$ id                   <chr> \"gadusnspecificatae4ba\", \"piscesfrigus900\", \"pisc…\n$ Name                 <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, \"Haacklee…\n$ Description          <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ Activities           <chr> \"NULL\", \"NULL\", \"NULL\", \"NULL\", \"NULL\", \"NULL\", \"…\n$ kind                 <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, \"city\", \"…\n$ qty_tons             <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ date                 <dttm> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ flag_country         <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ company              <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ tonnage              <int> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ length_overall       <int> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ style                <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ fish_species_present <chr> \"NULL\", \"NULL\", \"NULL\", \"NULL\", \"NULL\", \"NULL\", \"…\n```\n\n\n:::\n:::\n\n\n### 2.2.3 Processing Transponder Ping Data\n\nBelow code vessel type and company to transponder ping data and filter by fishing vessels only.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Rename target column as vessel_id\nE_TransponderPing <- E_TransponderPing %>%\n  rename(vessel_id = target)\n\n# Join data tables to include vessel_type, vessel_company in transponder ping data and filter only Fishing vessel type\nE_Tping_Fishing <- E_TransponderPing %>%\n  left_join(N_vessel %>% select(vessel_id, vessel_type, vessel_company), by = \"vessel_id\") %>%\n  filter(vessel_type == \"Fishing\")\n```\n:::\n\n\n### 2.2.4 Oceanus Geographical Data Processing\n\nCode chunk below uses `st_read()` of **sf** package to import Oceanus Geography and Oceanus Locations geographical file in geojson format into R.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Import into R\nOceanusGeography = st_read(\"data/MC2/OceanusGeography.geojson\") %>%\n  st_transform(crs = 4326)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `OceanusGeography' from data source \n  `C:\\tmyatnoe\\ISSS608-VAA\\Take-home_Ex\\Take-home_Ex03\\data\\MC2\\OceanusGeography.geojson' \n  using driver `GeoJSON'\nSimple feature collection with 29 features and 7 fields\nGeometry type: GEOMETRY\nDimension:     XY\nBounding box:  xmin: -167.0654 ymin: 38.07452 xmax: -163.2723 ymax: 40.67775\nGeodetic CRS:  WGS 84\n```\n\n\n:::\n\n```{.r .cell-code}\n# Save OceanusGeography into rds format for future use\nwrite_rds(OceanusGeography, \"data/rds/OceanusGeography.rds\")\n\n# Import into R\nOceanusLocations <- st_read(dsn = \"data/shp\",\n  layer = \"Oceanus Geography\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `Oceanus Geography' from data source \n  `C:\\tmyatnoe\\ISSS608-VAA\\Take-home_Ex\\Take-home_Ex03\\data\\shp' \n  using driver `ESRI Shapefile'\nSimple feature collection with 27 features and 7 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: -167.0654 ymin: 38.07452 xmax: -163.2723 ymax: 40.67775\nGeodetic CRS:  WGS 84\n```\n\n\n:::\n\n```{.r .cell-code}\n# Save OceanusLocations into rds format for future use\nwrite_rds(OceanusLocations, \"data/rds/OceanusLocations.rds\")\n```\n:::\n\n\n# 3. Visualisation\n\n## 3.1 Visualisations for Question 1\n\n### 3.1.1 Delivery Content (Fish Species)\n\nFirst, we need to associate Cargo in delivery doc to fish species and port city info using Transaction, city and Fish Nodes data.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Extract Cargo to Fish relation data from Transaction Event data\nCargo_to_Fish <- E_Tx %>%\n  filter(target %in% N_fish$fish_id) %>% select(source, target)\n\n# Match Cargo Id in delivery doc to fish Id from Transaction data\nN_Delivery_doc <- N_Delivery_doc %>%\n  left_join(Cargo_to_Fish, by = c(\"cargo_id\" = \"source\"))\n\n# Match Fish Id in delivery doc to fish species from Fish Nodes\nN_Delivery_doc <- N_Delivery_doc %>%\n  left_join(N_fish %>% select(\"fish_id\", \"fish_species\"), by = c(\"target\" = \"fish_id\"))\n\n# Rename Target Column in N_Delivery_doc to Fish Id\nN_Delivery_doc <- N_Delivery_doc %>% \n  rename(fish_id = target)\n\n# Extract Cargo to Port relation data from Transaction Event data\nCargo_to_City <- E_Tx %>%\n  filter(target %in% NL_City$city_id) %>% select(source, target)\n\n# Match Cargo Id in delivery doc to fish Id from Transaction data\nN_Delivery_doc <- N_Delivery_doc %>%\n  left_join(Cargo_to_City, by = c(\"cargo_id\" = \"source\"))\n\n# Rename Target Column in N_Delivery_doc to Port\nN_Delivery_doc <- N_Delivery_doc %>% \n  rename(port = target)\n```\n:::\n\n\nNext, extract date only from time column of transponder data.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Extract Date only from time column of Transponder Ping data\nE_Tping_Fishing <- E_Tping_Fishing %>%\n  mutate(date_only = as.Date(time))\n```\n:::\n\n\nConnect possible cargo (from delivery doc) to vessels (transponder ping data) using date as connection. This will give probable cargo delivered by each vessel.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Merge the datasets based on the date\nTping_to_Delivery <- E_Tping_Fishing %>%\n  filter(source %in% NL_City$city_id) %>%\n  left_join(N_Delivery_doc %>% select(\"deliver_date\",\"port\",\"cargo_id\", \"qty_tons\", \"fish_id\", \"fish_species\"), by = c(\"date_only\" = \"deliver_date\", \"source\" = \"port\"))\n```\n:::\n\n\nVisualize which company possibly delivers which fish species.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Remove duplicate rows based on vessel_company and fish_species\ndistinct_species <- Tping_to_Delivery %>%\n  distinct(vessel_company, fish_species) %>% na.omit() %>% select(vessel_company, fish_species)\n\n# Filter to show only the first 50 companies alphabetically\ncompanies1 <- distinct_species %>%\n  distinct(vessel_company) %>%\n  arrange(vessel_company) %>%\n  head(50) %>%\n  pull(vessel_company)\n\n# Filter data to include only these first 50 companies alphabetically\ncompanies1_data <- distinct_species %>%\n  filter(vessel_company %in% companies1)\n\n# Creating stacked bar chart for first 50 companies alphabetically\np1 <- ggplot(companies1_data, aes(x = vessel_company, fill = fish_species)) +\n  geom_bar(position = \"stack\") +\n  labs(title = \"Probable Fish Species Delivered by Company\",\n       x = \"Vessel Company\",\n       y = \"Fish Species\") +\n  theme(axis.text.x = element_blank(),\n        axis.text.y = element_text(size = 8),\n        legend.text = element_text(size = 8),\n        legend.title = element_text(size = 8)) +\n  scale_fill_discrete(name = \"Fish Species\") +\n  scale_fill_brewer(palette = \"Dark2\") +\n  coord_flip() +\n  scale_fill_brewer(palette = \"Paired\")\n\n# Get all company names excluding the first 50 alphabetically\ncompanies2 <- distinct_species %>%\n  distinct(vessel_company) %>%\n  arrange(vessel_company) %>%\n  slice(51:n()) %>%\n  pull(vessel_company)\n\n# Filter data to include only 51st to last company alphabetically\ncompanies2_data <- distinct_species %>%\n  filter(vessel_company %in% companies2)\n\n# Creating stacked bar chart for 51st to last company alphabetically\np2 <- ggplot(companies2_data, aes(x = vessel_company, fill = fish_species)) +\n  geom_bar(position = \"stack\") +\n  labs(title = \"Probable Fish Species Delivered by Company\",\n       x = \"Vessel Company\",\n       y = \"Fish Species\") +\n  theme(axis.text.x = element_blank(),\n        axis.text.y = element_text(size = 8),\n        legend.text = element_text(size = 8),\n        legend.title = element_text(size = 8)) +\n  scale_fill_discrete(name = \"Fish Species\") +\n  coord_flip() +\n  scale_fill_brewer(palette = \"Paired\")\n\np2\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex03_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\np1\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex03_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\n::: {style=\"border: 2px dotted black; background-color: #caf0f8; padding: 15px; margin: 10px 0; border-radius: 5px; display: flex; align-items: center;\"}\n<img src=\"shark_4864506.png\" alt=\"Icon\" style=\"width: 48px; height: 48px; margin-right: 10px;\"/> **Observation:** It is observed that SouthSeafood Express Corp's catch content has fewer types of fish species comparing to majority of the companies which catch at least 8 species. SouthSeafood Express Corp's catch content shows 5 species of fish namely: Wrasse, Sockfish, Harland, Cod and Beauvoir. This observation calls for further deep dive in catch content and delivery document of SouthSeafood Express Corp since low catch content may indicate non-reporting/ misreporting the actual catch from fishing to officials which is a form of Illegal, unreported and unregulated (IUU) fishing.\n:::\n\n### 3.1.2 Seasonal Trend in Delivery Content\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Convert deliver_date to a date format and extract year_month from deliver_date\nN_Delivery_doc <- N_Delivery_doc %>%\n  mutate(year_month = floor_date(deliver_date, \"month\"))\n\n# Group data by year_month\nmonthly_data <- N_Delivery_doc %>%\n  group_by(year_month) %>%\n  summarise(total_qty_tons = sum(qty_tons))\n\n# Extract the month (Full month name format) from the 'date' column\nmonthly_data$month <- format(monthly_data$year_month, \"%B\")\n\n# Plot the graph using plotly\nplot_ly(data = monthly_data, \n        x = ~month, \n        y = ~total_qty_tons, \n        type = 'bar', \n        marker = list(color = '#800080')) %>%\n  layout(title = 'Total Quantity of Fish Delivered per Month',\n         xaxis = list(title = 'Month', \n                      tickvals = monthly_data$month), \n         yaxis = list(title = 'Total Quantity (tons)')) \n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"plotly html-widget html-fill-item\" id=\"htmlwidget-6985bd1b90c6b161a94d\" style=\"width:100%;height:464px;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-6985bd1b90c6b161a94d\">{\"x\":{\"visdat\":{\"a500748a1185\":[\"function () \",\"plotlyVisDat\"]},\"cur_data\":\"a500748a1185\",\"attrs\":{\"a500748a1185\":{\"x\":{},\"y\":{},\"marker\":{\"color\":\"#800080\"},\"alpha_stroke\":1,\"sizes\":[10,100],\"spans\":[1,20],\"type\":\"bar\"}},\"layout\":{\"margin\":{\"b\":40,\"l\":60,\"t\":25,\"r\":10},\"title\":\"Total Quantity of Fish Delivered per Month\",\"xaxis\":{\"domain\":[0,1],\"automargin\":true,\"title\":\"Month\",\"tickvals\":[\"February\",\"March\",\"April\",\"May\",\"June\",\"July\",\"August\",\"September\",\"October\",\"November\"]},\"yaxis\":{\"domain\":[0,1],\"automargin\":true,\"title\":\"Total Quantity (tons)\"},\"hovermode\":\"closest\",\"showlegend\":false},\"source\":\"A\",\"config\":{\"modeBarButtonsToAdd\":[\"hoverclosest\",\"hovercompare\"],\"showSendToCloud\":false},\"data\":[{\"x\":[\"February\",\"March\",\"April\",\"May\",\"June\",\"July\",\"August\",\"September\",\"October\",\"November\"],\"y\":[1307,2321.125,2993.125,5004.125,5089.5,8811.625,18698.125,23255.375,29765.25,29016.5],\"marker\":{\"color\":\"#800080\",\"line\":{\"color\":\"rgba(31,119,180,1)\"}},\"type\":\"bar\",\"error_y\":{\"color\":\"rgba(31,119,180,1)\"},\"error_x\":{\"color\":\"rgba(31,119,180,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"frame\":null}],\"highlight\":{\"on\":\"plotly_click\",\"persistent\":false,\"dynamic\":false,\"selectize\":false,\"opacityDim\":0.20000000000000001,\"selected\":{\"opacity\":1},\"debounce\":0},\"shinyEvents\":[\"plotly_hover\",\"plotly_click\",\"plotly_selected\",\"plotly_relayout\",\"plotly_brushed\",\"plotly_brushing\",\"plotly_clickannotation\",\"plotly_doubleclick\",\"plotly_deselect\",\"plotly_afterplot\",\"plotly_sunburstclick\"],\"base_url\":\"https://plot.ly\"},\"evals\":[],\"jsHooks\":[]}</script>\n```\n\n:::\n:::\n\n\nIt is observed that total catch quantity shows increasing trend from beginning of the year to end of the year. Next, above chart will be further broken down by fish species to check any seasonality in fish species caught.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Group data by year_month & fish_species and sum up total_qty_tons\ngroup_by_fish_species <- N_Delivery_doc %>%\n  group_by(year_month, fish_species) %>%\n  summarise(total_qty_tons = sum(qty_tons), .groups = 'drop') \n\n# Remove scientific name in fish species\ngroup_by_fish_species <- group_by_fish_species %>%\n  mutate(fish_species = sub(\"/.*\", \"\", fish_species))\n\n# Update year_month to Date format\ngroup_by_fish_species <- group_by_fish_species %>%\n  mutate(year_month = as.Date(year_month))\n\n# Plot the graph using ggplot\np <- ggplot(group_by_fish_species, aes(x = year_month, y = total_qty_tons, fill = fish_species)) +\n  geom_bar(stat = \"identity\") +\n  labs(title = \"Total Quantity of Fish Delivered per Month (Breakdown by Fish Species)\",\n       x = \"Month\",\n       y = \"Total Quantity (tons)\",\n       fill = \"Fish Species\") +\n  theme(axis.text.x = element_text(angle = 90, hjust = 1)) +\n  scale_x_date(date_breaks = \"1 month\", date_labels = \"%b %Y\") +\n  scale_fill_brewer(palette = \"Paired\")\n\n# Create interactive plot using ggplotly\nggplotly(p)\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"plotly html-widget html-fill-item\" id=\"htmlwidget-f1c5a7529187bfd2397f\" style=\"width:100%;height:464px;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-f1c5a7529187bfd2397f\">{\"x\":{\"data\":[{\"orientation\":\"v\",\"width\":[25.19999999999709,25.19999999999709,25.19999999999709,25.19999999999709,25.19999999999709,25.19999999999709,25.19999999999709,25.19999999999709,25.19999999999709],\"base\":[2199.625,2475,4541.875,4786.75,7831,14750.375,22410,27217.75,23512.375],\"x\":[23799,23830,23860,23891,23921,23952,23983,24013,24044],\"y\":[121.5,518.125,462.25,302.75,980.625,3947.75,845.375,2547.5,5504.125],\"text\":[\"year_month: 2035-02-28<br />total_qty_tons:   121.500<br />fish_species: Beauvoir\",\"year_month: 2035-03-31<br />total_qty_tons:   518.125<br />fish_species: Beauvoir\",\"year_month: 2035-04-30<br />total_qty_tons:   462.250<br />fish_species: Beauvoir\",\"year_month: 2035-05-31<br />total_qty_tons:   302.750<br />fish_species: Beauvoir\",\"year_month: 2035-06-30<br />total_qty_tons:   980.625<br />fish_species: Beauvoir\",\"year_month: 2035-07-31<br />total_qty_tons:  3947.750<br />fish_species: Beauvoir\",\"year_month: 2035-08-31<br />total_qty_tons:   845.375<br />fish_species: Beauvoir\",\"year_month: 2035-09-30<br />total_qty_tons:  2547.500<br />fish_species: Beauvoir\",\"year_month: 2035-10-31<br />total_qty_tons:  5504.125<br />fish_species: Beauvoir\"],\"type\":\"bar\",\"textposition\":\"none\",\"marker\":{\"autocolorscale\":false,\"color\":\"rgba(166,206,227,1)\",\"line\":{\"width\":1.8897637795275593,\"color\":\"transparent\"}},\"name\":\"Beauvoir\",\"legendgroup\":\"Beauvoir\",\"showlegend\":true,\"xaxis\":\"x\",\"yaxis\":\"y\",\"hoverinfo\":\"text\",\"frame\":null},{\"orientation\":\"v\",\"width\":[25.19999999999709,25.19999999999709,25.19999999999709,25.19999999999709,25.19999999999709,25.19999999999709,25.19999999999709],\"base\":[4329.875,4600.5,6625.625,13515.125,19567.75,23122.875,19309.125],\"x\":[23860,23891,23921,23952,23983,24013,24044],\"y\":[212,186.25,1205.375,1235.25,2842.25,4094.875,4203.25],\"text\":[\"year_month: 2035-04-30<br />total_qty_tons:   212.000<br />fish_species: Birdseye\",\"year_month: 2035-05-31<br />total_qty_tons:   186.250<br />fish_species: Birdseye\",\"year_month: 2035-06-30<br />total_qty_tons:  1205.375<br />fish_species: Birdseye\",\"year_month: 2035-07-31<br />total_qty_tons:  1235.250<br />fish_species: Birdseye\",\"year_month: 2035-08-31<br />total_qty_tons:  2842.250<br />fish_species: Birdseye\",\"year_month: 2035-09-30<br />total_qty_tons:  4094.875<br />fish_species: Birdseye\",\"year_month: 2035-10-31<br />total_qty_tons:  4203.250<br />fish_species: Birdseye\"],\"type\":\"bar\",\"textposition\":\"none\",\"marker\":{\"autocolorscale\":false,\"color\":\"rgba(31,120,180,1)\",\"line\":{\"width\":1.8897637795275593,\"color\":\"transparent\"}},\"name\":\"Birdseye\",\"legendgroup\":\"Birdseye\",\"showlegend\":true,\"xaxis\":\"x\",\"yaxis\":\"y\",\"hoverinfo\":\"text\",\"frame\":null},{\"orientation\":\"v\",\"width\":[25.19999999999709,25.19999999999709,25.19999999999709,25.19999999999709,25.19999999999709,25.19999999999709,25.19999999999709,25.19999999999709,25.19999999999709],\"base\":[1871,2411.25,3973.25,3725.875,5035,7997.125,9568.75,10999.625,12879.875],\"x\":[23799,23830,23860,23891,23921,23952,23983,24013,24044],\"y\":[328.625,63.75,356.625,874.625,1590.625,5518,9999,12123.25,6429.25],\"text\":[\"year_month: 2035-02-28<br />total_qty_tons:   328.625<br />fish_species: Cod\",\"year_month: 2035-03-31<br />total_qty_tons:    63.750<br />fish_species: Cod\",\"year_month: 2035-04-30<br />total_qty_tons:   356.625<br />fish_species: Cod\",\"year_month: 2035-05-31<br />total_qty_tons:   874.625<br />fish_species: Cod\",\"year_month: 2035-06-30<br />total_qty_tons:  1590.625<br />fish_species: Cod\",\"year_month: 2035-07-31<br />total_qty_tons:  5518.000<br />fish_species: Cod\",\"year_month: 2035-08-31<br />total_qty_tons:  9999.000<br />fish_species: Cod\",\"year_month: 2035-09-30<br />total_qty_tons: 12123.250<br />fish_species: Cod\",\"year_month: 2035-10-31<br />total_qty_tons:  6429.250<br />fish_species: Cod\"],\"type\":\"bar\",\"textposition\":\"none\",\"marker\":{\"autocolorscale\":false,\"color\":\"rgba(178,223,138,1)\",\"line\":{\"width\":1.8897637795275593,\"color\":\"transparent\"}},\"name\":\"Cod\",\"legendgroup\":\"Cod\",\"showlegend\":true,\"xaxis\":\"x\",\"yaxis\":\"y\",\"hoverinfo\":\"text\",\"frame\":null},{\"orientation\":\"v\",\"width\":[25.19999999999709,25.19999999999709,25.19999999999709,25.19999999999709,25.19999999999709,25.19999999999709,25.19999999999709,25.19999999999709,25.19999999999709],\"base\":[1855.25,1517,3052.625,2879.125,4189.875,7565,8259.625,8232.5,9769.125],\"x\":[23799,23830,23860,23891,23921,23952,23983,24013,24044],\"y\":[15.75,894.25,920.625,846.75,845.125,432.125,1309.125,2767.125,3110.75],\"text\":[\"year_month: 2035-02-28<br />total_qty_tons:    15.750<br />fish_species: Harland\",\"year_month: 2035-03-31<br />total_qty_tons:   894.250<br />fish_species: Harland\",\"year_month: 2035-04-30<br />total_qty_tons:   920.625<br />fish_species: Harland\",\"year_month: 2035-05-31<br />total_qty_tons:   846.750<br />fish_species: Harland\",\"year_month: 2035-06-30<br />total_qty_tons:   845.125<br />fish_species: Harland\",\"year_month: 2035-07-31<br />total_qty_tons:   432.125<br />fish_species: Harland\",\"year_month: 2035-08-31<br />total_qty_tons:  1309.125<br />fish_species: Harland\",\"year_month: 2035-09-30<br />total_qty_tons:  2767.125<br />fish_species: Harland\",\"year_month: 2035-10-31<br />total_qty_tons:  3110.750<br />fish_species: Harland\"],\"type\":\"bar\",\"textposition\":\"none\",\"marker\":{\"autocolorscale\":false,\"color\":\"rgba(51,160,44,1)\",\"line\":{\"width\":1.8897637795275593,\"color\":\"transparent\"}},\"name\":\"Harland\",\"legendgroup\":\"Harland\",\"showlegend\":true,\"xaxis\":\"x\",\"yaxis\":\"y\",\"hoverinfo\":\"text\",\"frame\":null},{\"orientation\":\"v\",\"width\":[25.19999999999709,25.19999999999709,25.19999999999709,25.19999999999709,25.19999999999709,25.19999999999709],\"base\":[2931,2846.75,4060.375,7499.375,8197.125,9569.625],\"x\":[23860,23891,23921,23952,24013,24044],\"y\":[121.625,32.375,129.5,65.625,35.375,199.5],\"text\":[\"year_month: 2035-04-30<br />total_qty_tons:   121.625<br />fish_species: Helenaa\",\"year_month: 2035-05-31<br />total_qty_tons:    32.375<br />fish_species: Helenaa\",\"year_month: 2035-06-30<br />total_qty_tons:   129.500<br />fish_species: Helenaa\",\"year_month: 2035-07-31<br />total_qty_tons:    65.625<br />fish_species: Helenaa\",\"year_month: 2035-09-30<br />total_qty_tons:    35.375<br />fish_species: Helenaa\",\"year_month: 2035-10-31<br />total_qty_tons:   199.500<br />fish_species: Helenaa\"],\"type\":\"bar\",\"textposition\":\"none\",\"marker\":{\"autocolorscale\":false,\"color\":\"rgba(251,154,153,1)\",\"line\":{\"width\":1.8897637795275593,\"color\":\"transparent\"}},\"name\":\"Helenaa\",\"legendgroup\":\"Helenaa\",\"showlegend\":true,\"xaxis\":\"x\",\"yaxis\":\"y\",\"hoverinfo\":\"text\",\"frame\":null},{\"orientation\":\"v\",\"width\":[25.19999999999709,25.19999999999709,25.19999999999709],\"base\":[7954.25,7401.25,7270.375],\"x\":[23983,24013,24044],\"y\":[305.375,795.875,2299.25],\"text\":[\"year_month: 2035-08-31<br />total_qty_tons:   305.375<br />fish_species: Offidiaa\",\"year_month: 2035-09-30<br />total_qty_tons:   795.875<br />fish_species: Offidiaa\",\"year_month: 2035-10-31<br />total_qty_tons:  2299.250<br />fish_species: Offidiaa\"],\"type\":\"bar\",\"textposition\":\"none\",\"marker\":{\"autocolorscale\":false,\"color\":\"rgba(227,26,28,1)\",\"line\":{\"width\":1.8897637795275593,\"color\":\"transparent\"}},\"name\":\"Offidiaa\",\"legendgroup\":\"Offidiaa\",\"showlegend\":true,\"xaxis\":\"x\",\"yaxis\":\"y\",\"hoverinfo\":\"text\",\"frame\":null},{\"orientation\":\"v\",\"width\":[25.19999999999709,25.19999999999709,25.19999999999709,25.19999999999709],\"base\":[3728.375,5643.25,5108.625,6358.875],\"x\":[23921,23952,23983,24013],\"y\":[332,1856.125,2845.625,1042.375],\"text\":[\"year_month: 2035-06-30<br />total_qty_tons:   332.000<br />fish_species: Salmon\",\"year_month: 2035-07-31<br />total_qty_tons:  1856.125<br />fish_species: Salmon\",\"year_month: 2035-08-31<br />total_qty_tons:  2845.625<br />fish_species: Salmon\",\"year_month: 2035-09-30<br />total_qty_tons:  1042.375<br />fish_species: Salmon\"],\"type\":\"bar\",\"textposition\":\"none\",\"marker\":{\"autocolorscale\":false,\"color\":\"rgba(253,191,111,1)\",\"line\":{\"width\":1.8897637795275593,\"color\":\"transparent\"}},\"name\":\"Salmon\",\"legendgroup\":\"Salmon\",\"showlegend\":true,\"xaxis\":\"x\",\"yaxis\":\"y\",\"hoverinfo\":\"text\",\"frame\":null},{\"orientation\":\"v\",\"width\":[25.19999999999709,25.19999999999709,25.19999999999709,25.19999999999709,25.19999999999709,25.19999999999709,25.19999999999709,25.19999999999709],\"base\":[1505.625,1799.5,2229.375,3026.125,4248.875,4105.625,4503.875,4487.375],\"x\":[23830,23860,23891,23921,23952,23983,24013,24044],\"y\":[11.375,1131.5,617.375,702.25,1394.375,1003,1855,2783],\"text\":[\"year_month: 2035-03-31<br />total_qty_tons:    11.375<br />fish_species: Sockfish\",\"year_month: 2035-04-30<br />total_qty_tons:  1131.500<br />fish_species: Sockfish\",\"year_month: 2035-05-31<br />total_qty_tons:   617.375<br />fish_species: Sockfish\",\"year_month: 2035-06-30<br />total_qty_tons:   702.250<br />fish_species: Sockfish\",\"year_month: 2035-07-31<br />total_qty_tons:  1394.375<br />fish_species: Sockfish\",\"year_month: 2035-08-31<br />total_qty_tons:  1003.000<br />fish_species: Sockfish\",\"year_month: 2035-09-30<br />total_qty_tons:  1855.000<br />fish_species: Sockfish\",\"year_month: 2035-10-31<br />total_qty_tons:  2783.000<br />fish_species: Sockfish\"],\"type\":\"bar\",\"textposition\":\"none\",\"marker\":{\"autocolorscale\":false,\"color\":\"rgba(255,127,0,1)\",\"line\":{\"width\":1.8897637795275593,\"color\":\"transparent\"}},\"name\":\"Sockfish\",\"legendgroup\":\"Sockfish\",\"showlegend\":true,\"xaxis\":\"x\",\"yaxis\":\"y\",\"hoverinfo\":\"text\",\"frame\":null},{\"orientation\":\"v\",\"width\":[25.19999999999709,25.19999999999709],\"base\":[4234.125,4398],\"x\":[24013,24044],\"y\":[269.75,89.375],\"text\":[\"year_month: 2035-09-30<br />total_qty_tons:   269.750<br />fish_species: Tuna\",\"year_month: 2035-10-31<br />total_qty_tons:    89.375<br />fish_species: Tuna\"],\"type\":\"bar\",\"textposition\":\"none\",\"marker\":{\"autocolorscale\":false,\"color\":\"rgba(202,178,214,1)\",\"line\":{\"width\":1.8897637795275593,\"color\":\"transparent\"}},\"name\":\"Tuna\",\"legendgroup\":\"Tuna\",\"showlegend\":true,\"xaxis\":\"x\",\"yaxis\":\"y\",\"hoverinfo\":\"text\",\"frame\":null},{\"orientation\":\"v\",\"width\":[25.19999999999709,25.19999999999709,25.19999999999709,25.19999999999709,25.19999999999709,25.19999999999709,25.19999999999709,25.19999999999709,25.19999999999709,25.19999999999709],\"base\":[0,0,0,0,0,0,0,0,0,0],\"x\":[23771,23799,23830,23860,23891,23921,23952,23983,24013,24044],\"y\":[1307,1855.25,1505.625,1799.5,2229.375,3026.125,4248.875,4105.625,4234.125,4398],\"text\":[\"year_month: 2035-01-31<br />total_qty_tons:  1307.000<br />fish_species: Wrasse\",\"year_month: 2035-02-28<br />total_qty_tons:  1855.250<br />fish_species: Wrasse\",\"year_month: 2035-03-31<br />total_qty_tons:  1505.625<br />fish_species: Wrasse\",\"year_month: 2035-04-30<br />total_qty_tons:  1799.500<br />fish_species: Wrasse\",\"year_month: 2035-05-31<br />total_qty_tons:  2229.375<br />fish_species: Wrasse\",\"year_month: 2035-06-30<br />total_qty_tons:  3026.125<br />fish_species: Wrasse\",\"year_month: 2035-07-31<br />total_qty_tons:  4248.875<br />fish_species: Wrasse\",\"year_month: 2035-08-31<br />total_qty_tons:  4105.625<br />fish_species: Wrasse\",\"year_month: 2035-09-30<br />total_qty_tons:  4234.125<br />fish_species: Wrasse\",\"year_month: 2035-10-31<br />total_qty_tons:  4398.000<br />fish_species: Wrasse\"],\"type\":\"bar\",\"textposition\":\"none\",\"marker\":{\"autocolorscale\":false,\"color\":\"rgba(106,61,154,1)\",\"line\":{\"width\":1.8897637795275593,\"color\":\"transparent\"}},\"name\":\"Wrasse\",\"legendgroup\":\"Wrasse\",\"showlegend\":true,\"xaxis\":\"x\",\"yaxis\":\"y\",\"hoverinfo\":\"text\",\"frame\":null}],\"layout\":{\"margin\":{\"t\":43.762557077625573,\"r\":7.3059360730593621,\"b\":75.251141552511427,\"l\":54.794520547945211},\"plot_bgcolor\":\"rgba(235,235,235,1)\",\"paper_bgcolor\":\"rgba(255,255,255,1)\",\"font\":{\"color\":\"rgba(0,0,0,1)\",\"family\":\"\",\"size\":14.611872146118724},\"title\":{\"text\":\"Total Quantity of Fish Delivered per Month (Breakdown by Fish Species)\",\"font\":{\"color\":\"rgba(0,0,0,1)\",\"family\":\"\",\"size\":17.534246575342465},\"x\":0,\"xref\":\"paper\"},\"xaxis\":{\"domain\":[0,1],\"automargin\":true,\"type\":\"linear\",\"autorange\":false,\"range\":[23743.490000000002,24071.509999999998],\"tickmode\":\"array\",\"ticktext\":[\"Feb 2035\",\"Mar 2035\",\"Apr 2035\",\"May 2035\",\"Jun 2035\",\"Jul 2035\",\"Aug 2035\",\"Sep 2035\",\"Oct 2035\",\"Nov 2035\"],\"tickvals\":[23772,23800,23831,23861,23892,23922,23953,23984,24014,24045],\"categoryorder\":\"array\",\"categoryarray\":[\"Feb 2035\",\"Mar 2035\",\"Apr 2035\",\"May 2035\",\"Jun 2035\",\"Jul 2035\",\"Aug 2035\",\"Sep 2035\",\"Oct 2035\",\"Nov 2035\"],\"nticks\":null,\"ticks\":\"outside\",\"tickcolor\":\"rgba(51,51,51,1)\",\"ticklen\":3.6529680365296811,\"tickwidth\":0.66417600664176002,\"showticklabels\":true,\"tickfont\":{\"color\":\"rgba(77,77,77,1)\",\"family\":\"\",\"size\":11.68949771689498},\"tickangle\":-90,\"showline\":false,\"linecolor\":null,\"linewidth\":0,\"showgrid\":true,\"gridcolor\":\"rgba(255,255,255,1)\",\"gridwidth\":0.66417600664176002,\"zeroline\":false,\"anchor\":\"y\",\"title\":{\"text\":\"Month\",\"font\":{\"color\":\"rgba(0,0,0,1)\",\"family\":\"\",\"size\":14.611872146118724}},\"hoverformat\":\".2f\"},\"yaxis\":{\"domain\":[0,1],\"automargin\":true,\"type\":\"linear\",\"autorange\":false,\"range\":[-1488.2625,31253.512500000001],\"tickmode\":\"array\",\"ticktext\":[\"0\",\"10000\",\"20000\",\"30000\"],\"tickvals\":[0,10000,20000,30000],\"categoryorder\":\"array\",\"categoryarray\":[\"0\",\"10000\",\"20000\",\"30000\"],\"nticks\":null,\"ticks\":\"outside\",\"tickcolor\":\"rgba(51,51,51,1)\",\"ticklen\":3.6529680365296811,\"tickwidth\":0.66417600664176002,\"showticklabels\":true,\"tickfont\":{\"color\":\"rgba(77,77,77,1)\",\"family\":\"\",\"size\":11.68949771689498},\"tickangle\":-0,\"showline\":false,\"linecolor\":null,\"linewidth\":0,\"showgrid\":true,\"gridcolor\":\"rgba(255,255,255,1)\",\"gridwidth\":0.66417600664176002,\"zeroline\":false,\"anchor\":\"x\",\"title\":{\"text\":\"Total Quantity (tons)\",\"font\":{\"color\":\"rgba(0,0,0,1)\",\"family\":\"\",\"size\":14.611872146118724}},\"hoverformat\":\".2f\"},\"shapes\":[{\"type\":\"rect\",\"fillcolor\":null,\"line\":{\"color\":null,\"width\":0,\"linetype\":[]},\"yref\":\"paper\",\"xref\":\"paper\",\"x0\":0,\"x1\":1,\"y0\":0,\"y1\":1}],\"showlegend\":true,\"legend\":{\"bgcolor\":\"rgba(255,255,255,1)\",\"bordercolor\":\"transparent\",\"borderwidth\":1.8897637795275593,\"font\":{\"color\":\"rgba(0,0,0,1)\",\"family\":\"\",\"size\":11.68949771689498},\"title\":{\"text\":\"Fish Species\",\"font\":{\"color\":\"rgba(0,0,0,1)\",\"family\":\"\",\"size\":14.611872146118724}}},\"hovermode\":\"closest\",\"barmode\":\"relative\"},\"config\":{\"doubleClick\":\"reset\",\"modeBarButtonsToAdd\":[\"hoverclosest\",\"hovercompare\"],\"showSendToCloud\":false},\"source\":\"A\",\"attrs\":{\"a500572f335e\":{\"x\":{},\"y\":{},\"fill\":{},\"type\":\"bar\"}},\"cur_data\":\"a500572f335e\",\"visdat\":{\"a500572f335e\":[\"function (y) \",\"x\"]},\"highlight\":{\"on\":\"plotly_click\",\"persistent\":false,\"dynamic\":false,\"selectize\":false,\"opacityDim\":0.20000000000000001,\"selected\":{\"opacity\":1},\"debounce\":0},\"shinyEvents\":[\"plotly_hover\",\"plotly_click\",\"plotly_selected\",\"plotly_relayout\",\"plotly_brushed\",\"plotly_brushing\",\"plotly_clickannotation\",\"plotly_doubleclick\",\"plotly_deselect\",\"plotly_afterplot\",\"plotly_sunburstclick\"],\"base_url\":\"https://plot.ly\"},\"evals\":[],\"jsHooks\":[]}</script>\n```\n\n:::\n:::\n\n\n::: {style=\"border: 2px dotted black; background-color: #caf0f8; padding: 15px; margin: 10px 0; border-radius: 5px; display: flex; align-items: center;\"}\n<img src=\"schedule_3652191.png\" alt=\"Icon\" style=\"width: 48px; height: 48px; margin-right: 10px;\"/> **Observation:** From plots above, general increasing trend is observed in the total fish caught and delivered to port from February to November. There is significant increase in cod fish catches stating from August. This may be a sign of illegal fishing which is taking fish in excess quota or this could be attributed to starting of [best time for cod fishing](https://www.saltwatersportsman.com/howto/cod-hotspots/) which is winter.\n:::\n\n## 3.2 Visualisations for Question 2\n\n### 3.2.1 Understanding Vessel Movement\n\nTransponder ping data can provide the locations the vessels from shipping company has been to or in the vicinity and give insight whether vessels may be conducting illegal fishing activities in non-fishing areas. In this section, we will focus only on fishing vessels to understand fishing activities.\n\nZoom into SouthSeafood Express Corp's vessel movement to uncover any suspicious behavior.\n\n::: panel-tabset\n## Plot\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](Take-home_Ex03_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n:::\n\n\n## Code\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Filter SouthSeafood Express Corp Vessels Only\nE_Tping_Fishing_SS <- E_Tping_Fishing %>%\n  filter(vessel_company == \"SouthSeafood Express Corp\")\n\nedges_ss <- data.frame(\n  from = E_Tping_Fishing_SS$vessel_company,\n  to = E_Tping_Fishing_SS$source\n)\n\n# Creating graph object\ngraph_ss <- graph_from_data_frame(edges_ss, directed = FALSE)\n\n\n# Distinguish between SouthSeafood and location\nV(graph_ss)$type <- ifelse(V(graph_ss)$name == \"SouthSeafood Express Corp\", \"southseafood\", \"location\")\n                       \n\n# Plot the network with ggraph\nggraph(graph_ss, layout = 'fr') +  \n  geom_edge_link(aes(width = 1), edge_colour = \"grey\") + \n  geom_node_point(aes(color = type), size = 5) + \n  geom_node_text(aes(label = name), repel = TRUE, size = 3, color = \"black\") +  \n  scale_color_manual(values = c(\"location\" = \"plum\", \"southseafood\" = \"maroon3\")) + \n  theme_void() +  \n  labs(title = \"Network Visualization of SouthSeafood Express Corp Vessel Movement\")\n```\n:::\n\n:::\n\n::: {style=\"border: 2px dotted black; background-color: #caf0f8; padding: 15px; margin: 10px 0; border-radius: 5px; display: flex; align-items: center;\"}\n<img src=\"ship_1826384.png\" alt=\"Icon\" style=\"width: 48px; height: 48px; margin-right: 10px;\"/> **Observation:** One anomaly noted here is that SouthSeafood Express Corp Vessels visited or has been in vicinity [Ghoti Preserve]{.underline} which is not a fishing ground but ecological reserve. Length of each branch indicate frequency of transponder ping to each location, shorter being more frequent transponder pings.\n:::\n\nCreating vessel movement data table based in transponder ping and adding corresponding co-ordinates to data for further visualization.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create vessel movement data table\nvessel_movement_data <- E_TransponderPing %>%\n    select(time, dwell, source, vessel_id)\n\n# Tidy source column\nvessel_movement_data <- vessel_movement_data%>%\n  mutate(source = gsub(\"^City of\", \"\", source)) %>%\n  mutate(source = gsub(\"^\\\\s+\", \"\", source))\n\n# Add X, Y coordinates to vessel movement data table\ncoords <- st_coordinates(OceanusLocations)\n\nOceanusLocations_df <- OceanusLocations %>%\n  st_drop_geometry()\n\nOceanusLocations_df$XCOORD <- coords[, \"X\"]\nOceanusLocations_df$YCOORD <- coords[, \"Y\"]\n\nOceanusLocations_df <- OceanusLocations_df %>%\n  select(Name, X.Kind, XCOORD, YCOORD) %>%\n  rename(Loc_Type = X.Kind)\n\nvessel_movement_data <- vessel_movement_data %>%\n  left_join(OceanusLocations_df,\n            by = c(\"source\" = \"Name\"))\n\n# save data as rds format\nwrite_rds(vessel_movement_data, \"data/rds/vessel_movement_data.rds\")\n```\n:::\n\n\nBelow code is used to create Vessel Trajectory Data.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvessel_movement_sf <- vessel_movement_data %>%\n  st_as_sf(coords = c(\"XCOORD\", \"YCOORD\"), \n           crs = 4326)\n\nvessel_movement_sf <- vessel_movement_sf %>%\n  arrange(vessel_id, time)\n\nvessel_trajectory <- vessel_movement_sf %>%\n  group_by(vessel_id) %>%\n  summarize(do_union = FALSE) %>%\n  st_cast(\"LINESTRING\")\n```\n:::\n\n\nBelow visualization shows Geo-Temporal Patterns of the SouthSeafood Express Corp Vessels.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Filter SouthSeafood Express Corp Vessel\nvessel_trajectory_selected2 <- vessel_trajectory %>%\n  filter(vessel_id %in% c(\"roachrobberdb6\", \"snappersnatcher7be\"))\n\n# Plot the chart\nggplot() +\n  geom_sf(data = OceanusGeography) +\n  geom_sf(data = vessel_trajectory_selected2, \n          aes(color = factor(vessel_id)), \n          size = 1) +\n  geom_text(data = OceanusLocations_df, \n            aes(x = XCOORD, y = YCOORD, label = Name), \n            size = 3, hjust = 1, vjust = 1) +\n  theme_minimal() +\n  labs(title = \"Trajectories of SouthSeafood Express Corp Vessels\", \n  x = \"Longitude\", y = \"Latitude\", color = \"ID\")\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex03_files/figure-html/unnamed-chunk-20-1.png){width=672}\n:::\n:::\n\n\nIt can be observed from above visualizations that snappersnatcher7be of SouthSeafood Express Corp is the vessel which had transponder pings around Ghoti Preserve which is not meant for commercial fishing. Next, SouthSeafood Express Corp Vessels routes above will be compared with randomly chosen fishing vessel routes to uncover any anomaly in fishing route.\n\n::: panel-tabset\n## lobsterlooterd41\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](Take-home_Ex03_files/figure-html/unnamed-chunk-21-1.png){width=672}\n:::\n:::\n\n\n## wavewarrior5d7\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](Take-home_Ex03_files/figure-html/unnamed-chunk-22-1.png){width=672}\n:::\n:::\n\n\n## spanishmackerelmaster037\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](Take-home_Ex03_files/figure-html/unnamed-chunk-23-1.png){width=672}\n:::\n:::\n\n\n## redfishraider677\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](Take-home_Ex03_files/figure-html/unnamed-chunk-24-1.png){width=672}\n:::\n:::\n\n\n## herringhunter30b\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](Take-home_Ex03_files/figure-html/unnamed-chunk-25-1.png){width=672}\n:::\n:::\n\n\n## Code\n\n\n::: {.cell}\n\n```{.r .cell-code}\n### lobsterlooterd41\n# Filter Vessel data\nvessel_trajectory_selected3 <- vessel_trajectory %>%\n  filter(vessel_id == \"lobsterlooterd41\") # Wolf and Sons\n\n# Plot the chart\nggplot() +\n  geom_sf(data = OceanusGeography) +\n  geom_sf(data = vessel_trajectory_selected3, \n          aes(color = factor(vessel_id)), \n          size = 1) +\n  geom_text(data = OceanusLocations_df, \n            aes(x = XCOORD, y = YCOORD, label = Name), \n            size = 3, hjust = 1, vjust = 1) +\n  theme_minimal() +\n  labs(title = \"Trajectories of lobsterlooterd41\", \n  x = \"Longitude\", y = \"Latitude\", color = \"ID\")\n\n### wavewarrior5d7\n# Filter Vessel data\nvessel_trajectory_selected4 <- vessel_trajectory %>%\n  filter(vessel_id == \"wavewarrior5d7\") # Rivera Group\n\n# Plot the chart\nggplot() +\n  geom_sf(data = OceanusGeography) +\n  geom_sf(data = vessel_trajectory_selected4, \n          aes(color = factor(vessel_id)), \n          size = 1) +\n  geom_text(data = OceanusLocations_df, \n            aes(x = XCOORD, y = YCOORD, label = Name), \n            size = 3, hjust = 1, vjust = 1) +\n  theme_minimal() +\n  labs(title = \"Trajectories of wavewarrior5d7\", \n  x = \"Longitude\", y = \"Latitude\", color = \"ID\")\n\n### spanishmackerelmaster037\n# Filter Vessel data\nvessel_trajectory_selected5 <- vessel_trajectory %>%\n  filter(vessel_id == \"spanishmackerelmaster037\") # Ritter Ltd\n\n# Plot the chart\nggplot() +\n  geom_sf(data = OceanusGeography) +\n  geom_sf(data = vessel_trajectory_selected5, \n          aes(color = factor(vessel_id)), \n          size = 1) +\n  geom_text(data = OceanusLocations_df, \n            aes(x = XCOORD, y = YCOORD, label = Name), \n            size = 3, hjust = 1, vjust = 1) +\n  theme_minimal() +\n  labs(title = \"Trajectories of spanishmackerelmaster037\", \n  x = \"Longitude\", y = \"Latitude\", color = \"ID\")\n\n### redfishraider677\n# Filter Vessel data\nvessel_trajectory_selected6 <- vessel_trajectory %>%\n  filter(vessel_id == \"redfishraider677\") # House Group\n\n# Plot the chart\nggplot() +\n  geom_sf(data = OceanusGeography) +\n  geom_sf(data = vessel_trajectory_selected6, \n          aes(color = factor(vessel_id)), \n          size = 1) +\n  geom_text(data = OceanusLocations_df, \n            aes(x = XCOORD, y = YCOORD, label = Name), \n            size = 3, hjust = 1, vjust = 1) +\n  theme_minimal() +\n  labs(title = \"Trajectories of redfishraider677\", \n  x = \"Longitude\", y = \"Latitude\", color = \"ID\")\n\n### herringhunter30b\n# Filter Vessel data\nvessel_trajectory_selected7 <- vessel_trajectory %>%\n  filter(vessel_id == \"herringhunter30b\") # Mooney, Stevenson and Miller\n\n# Plot the chart\nggplot() +\n  geom_sf(data = OceanusGeography) +\n  geom_sf(data = vessel_trajectory_selected7, \n          aes(color = factor(vessel_id)), \n          size = 1) +\n  geom_text(data = OceanusLocations_df, \n            aes(x = XCOORD, y = YCOORD, label = Name), \n            size = 3, hjust = 1, vjust = 1) +\n  theme_minimal() +\n  labs(title = \"Trajectories of herringhunter30b\", \n  x = \"Longitude\", y = \"Latitude\", color = \"ID\")\n```\n:::\n\n:::\n\n::: {style=\"border: 2px dotted black; background-color: #caf0f8; padding: 15px; margin: 10px 0; border-radius: 5px; display: flex; align-items: center;\"}\n<img src=\"ship_1826384.png\" alt=\"Icon\" style=\"width: 48px; height: 48px; margin-right: 10px;\"/> **Observation:** We can see from the routes of 5 random vessels that except from wavewarrior5d7, all the other vessels have been in areas of Ecological Preserves such as Ghoti Preserve and Nemo Reef which are not meant for commercial fishing. This suggests there may be many fishing companies that are engaging in illegal fishing practices.\n:::\n\n### 3.2.2 Understanding When SouthSeafood Performed Illegal Fishing\n\nTo understand when SouthSeafood Express Corp vessels performed their illegal fishing, let's take a look at the locations that SouthSeafood Express Corp vessels frequently visited. This can be done by plotting transponder ping data on calendar map.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Group data by date and location to get transponder pings counts\ngrouped <- E_Tping_Fishing_SS %>% \n  count(date_only, source) %>% \n  ungroup() %>%\n  na.omit()\n\n# Build the Calendar Heatmap\nggplot(grouped, \n       aes(date_only, \n           source, \n           fill = n)) + \ngeom_tile(color = \"white\", \n          size = 0.1) +\ncoord_equal() +\nscale_fill_gradient(name = \"# of Transponder Pings\",\n                    low = \"sky blue\", \n                    high = \"dark blue\") +\nlabs(x = NULL, \n     y = NULL, \n     title = \"Transponder Pings by Date and Location\") +\ntheme(axis.ticks = element_blank(),\n      axis.text.y = element_text(size = rel(0.7)),\n      plot.title = element_text(hjust = 0.5),\n      legend.title = element_text(size = 8),\n      legend.text = element_text(size = 6),\n      legend.position = \"none\")\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex03_files/figure-html/unnamed-chunk-27-1.png){width=672}\n:::\n:::\n\n\nFrom above plot, most frequent visited locations can be observed as Wrasse Beds, Nav C, Cod Table and Exit East. It is also good to check the duration these vessels spent at each location to understand they may have indeed performed illegal fishing activities.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Group data by date and dwell \ndwell <- E_Tping_Fishing_SS %>%\n  group_by(date_only,source,vessel_id) %>%\n  summarize(total_dwell = sum(dwell, na.rm = TRUE))\n\n# Plot the data with faceting\nggplot(dwell, aes(x = date_only, y = total_dwell, color = vessel_id)) +\n  geom_line() +\n  geom_point() +\n  labs(title = \"Total Dwell Time by Date at Each Location\",\n       x = \"Date\",\n       y = \"Total Dwell Time\",\n       color = \"Vessel Id\") +\n  facet_wrap(~ source) +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex03_files/figure-html/unnamed-chunk-28-1.png){width=672}\n:::\n:::\n\n\n::: {style=\"border: 2px dotted black; background-color: #caf0f8; padding: 15px; margin: 10px 0; border-radius: 5px; display: flex; align-items: center;\"}\n<img src=\"schedule_3652191.png\" alt=\"Icon\" style=\"width: 48px; height: 48px; margin-right: 10px;\"/> **Observation:** Apart from port locations (City of Himark and City of Lomark) where higher dwell times are expected, high dwell times are also observed at Wrasse Beds, Cod Table, Ghoti Preserve and Exit East (only one occurence). Long dwell time similar at Ghoti Preserve similar to that of Wrasse Beds and even higher than dwell time at Cod Table further validate the initial suspicions that SouthSeafood Express Corp vessel particularly (snappersnatcher7be) may be performing illegal fishing in the Ghoti Preserve area. High dwell time at Ghoti Preserve were observed in February time frame and it is highly likely that illegal fishing activities were performed during this time period in Ghoti Preserve.\n:::\n\n# 4. Conclusion\n\n-   By connecting possible cargo to vessels and their company, SouthSeafood Express Corp showed anomaly in number of fish species caught which is lower than majority of other fishing companies which suggests potential **non-reporting/ misreporting the actual catch** from fishing to officials.\n\n-   From total tonnes of fish delivered to ports plots by month, general increasing trend is observed in the total fish caught and delivered to port from February to November. There is significant increase in cod fish catches stating from August. This may be a sign of illegal fishing which is **taking fish in excess quota** or this could be attributed to starting of best time for cod fishing which is winter.\n\n-   Investigating the SouthSeafood Express Corp Vessels' fishing route based on transponder ping data, suspicious pattern is discovered which shows vessels were in the area of **Ghoti Preserve which is not meant for commercial fishing.** Further comparison of this to other vessels in Oceanus showed that many companies may also be engaging in illegal fishing activities since they have been in areas of Ecological Preserves such as Ghoti Preserve and Nemo Reef which are not designated for commercial fishing.\n\n-   Transponder ping Frequency per location and total dwell time per day at different locations show that SouthSeafood Express Corp may have indeed performed **illegal fishing activities at Ghoti Preserve** since long dwell times were observed in this area similar or higher than dwell times spent by SouthSeafood's vessel at commercial fishing spots like Wrasse Beds and Cod Table.\n\n# 5. References\n\n[Illegal, unreported and unregulated fishing and corruption](https://www.u4.no/publications/illegal-unreported-and-unregulated-fishing-and-corruption)\n\n[Working with Graph Data](https://isss608-ay2023-24apr.netlify.app/vast/kickstarter2)\n\n[Working with Geographical Data](https://isss608-ay2023-24apr.netlify.app/vast/kickstarter3)\n\n[Best time for cod fishing](https://www.saltwatersportsman.com/howto/cod-hotspots/)\n\n[Icons used](https://www.freepik.com/)\n",
    "supporting": [
      "Take-home_Ex03_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../../site_libs/htmltools-fill-0.5.8.1/fill.css\" rel=\"stylesheet\" />\n<script src=\"../../site_libs/htmlwidgets-1.6.4/htmlwidgets.js\"></script>\n<script src=\"../../site_libs/plotly-binding-4.10.4/plotly.js\"></script>\n<script src=\"../../site_libs/typedarray-0.1/typedarray.min.js\"></script>\n<script src=\"../../site_libs/jquery-3.5.1/jquery.min.js\"></script>\n<link href=\"../../site_libs/crosstalk-1.2.1/css/crosstalk.min.css\" rel=\"stylesheet\" />\n<script src=\"../../site_libs/crosstalk-1.2.1/js/crosstalk.min.js\"></script>\n<link href=\"../../site_libs/plotly-htmlwidgets-css-2.11.1/plotly-htmlwidgets.css\" rel=\"stylesheet\" />\n<script src=\"../../site_libs/plotly-main-2.11.1/plotly-latest.min.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}