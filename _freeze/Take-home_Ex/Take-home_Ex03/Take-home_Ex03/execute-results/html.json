{
  "hash": "2895e85cd7d025381cbdc51e2de80b4e",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Take-home Exercise 3\"\nauthor: \"Thet Myat Noe\"\ndate: \"May 14, 2024\"\ndate-modified: \"last-modified\"\ncode-fold: true\nexecute:\n  eval: true\n  echo: true\n  warning: false\n  freeze: true\n---\n\n\n# 1. Overview\n\n## 1.1 Setting the scene\nIn Oceanus, island life is defined by the coming and going of seafaring vessels, many of which are operated by commercial fishing companies. Typically, the movement of ships and goods are a sign of Oceanusâ€™s healthy economy, especially in the fishing business. But mundane routines can be disrupted by a major event. Analysts at FishEye International, a non-profit organization that aims to find and prevent illegal fishing, need help to better understand one such event.\n\nFishEye has learned that SouthSeafood Express Corp has been caught fishing illegally. The scandal caused a major disruption in the close-knit fishing community. FishEye has been collecting data on ship movements and shipping records in hopes that they could assemble a cohesive store of knowledge that will allow them to better understand local commercial fishing behavior. FishEye processed open-source and commercial vessel tracking and shipping records into CatchNet: the Oceanus Knowledge Graph. Analysts examine and correct data as it is loaded but need help to create analytical capabilities for this data.\n\n## 1.2 Task\n\nThis exercise aims to help FishEye, a non-profit organization that focuses on illegal fishing, to better identify bias, track behavior changes, and infer temporal patterns from the knowledge graphs prepared by their data analysts.\n\n# 2. Getting Started\n\n## 2.1 Installing and loading the required libraries\nThe code chunk below uses `p_load()` function from **pacman** package to check if packages listed are already installed in the computer. The packages are loaded if they are found to be installed. If they are not installed, the function will proceed to install and load them into R environment.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(jsonlite,tidyverse,igraph,ggraph)\n```\n:::\n\n\n## 2.2 Importing Data\n\n::: {.cell}\n\n```{.r .cell-code}\nmc2_data <- fromJSON(\"data/MC2/mc2.json\")\n```\n:::\n\n\n### 2.2.1 Processing Edges/Links Data\n\n::: {.cell}\n\n```{.r .cell-code}\n#assigning to mc2_edges2\nmc2_edges <- as_tibble(mc2_data$links)\n\n# Breaking into subsets based on event category\nE_TransponderPing <- subset(mc2_edges,  mc2_edges$type == \"Event.TransportEvent.TransponderPing\")\nE_HarborRpt <- subset(mc2_edges,  mc2_edges$type == \"Event.HarborReport\")\nE_Tx <- subset(mc2_edges, mc2_edges$type == \"Event.Transaction\")\n\n# Dropping columns that are NULL - check if code drops where data is 1 null or all null\n\nE_Tx_c <- E_Tx %>%\n  select_if(~ !any(is.na(.)))\n\nE_Tping_c <- E_TransponderPing %>%\n  select_if(~ !any(is.na(.)))\n\n# Exclude dropping of null for Habor report due to last 3 columns\n\n#E_Hbrpt_c <- E_HarborRpt %>%\n#  select_if(~ !any(is.na(.)))\n```\n:::\n\n\n### 2.2.2 Processing Nodes Data\n\n::: {.cell}\n\n```{.r .cell-code}\n# Segmenting nodes data\nmc2_nodes <- as_tibble(mc2_data$nodes)\n\n# Creating subset on nodes information\nN_fish <- subset(mc2_nodes,  mc2_nodes$type == \"Entity.Commodity.Fish\") %>%\n  select_if(~ !any(is.na(.))) %>%\n  select(-c(`type`, `_raw_source`, `_algorithm`, `Activities`, `fish_species_present`)) %>%\n  rename(fish_species = name, \n         fish_id = id)\n\nNL_City <- subset(mc2_nodes,  mc2_nodes$type == \"Entity.Location.City\") %>%\n  select_if(~ !any(is.na(.))) %>%\n  select(-c(`_raw_source`, `_algorithm`, `type`, `fish_species_present`)) %>%\n  rename(city_name = Name, \n         city_id = id)\n\n\nNL_Point <- subset(mc2_nodes,  mc2_nodes$type == \"Entity.Location.Point\") %>%\n  select_if(~ !any(is.na(.))) %>%\n  select(-c(`_raw_source`, `_algorithm`, `kind`, `fish_species_present`)) %>%\n  rename(point_name = Name, \n         point_id = id)\n\n## Need to tidy NL Region\nNL_Region <- subset(mc2_nodes,  mc2_nodes$type == \"Entity.Location.Region\") %>%\n  select_if(~ !any(is.na(.))) %>%\n  select(-c(`_raw_source`, `_algorithm`, `type`, `Description`)) %>%\n  rename(region_name = Name, \n         region_id = id, \n         region_kind = kind)\n\nN_Delivery_doc <- subset(mc2_nodes,  mc2_nodes$type == \"Entity.Document.DeliveryReport\") %>%\n  select_if(~ !any(is.na(.))) %>%\n  rename(deliver_date = date,\n         cargo_id = id) %>%\n  select(-c(`_algorithm`, `type`, `_raw_source`, `Activities`, `fish_species_present`)) \n\nN_vessel <- mc2_nodes %>%\n  filter(grepl(\"Entity.Vessel\", type)) %>%\n  mutate(vessel_type = case_when(\n    grepl(\"FishingVessel\", type, ignore.case = TRUE) ~ \"Fishing\",\n    grepl(\"Ferry.Passenger\", type, ignore.case = TRUE) ~ \"Ferry_Passenger\",\n    grepl(\"Ferry.Cargo\", type, ignore.case = TRUE) ~ \"Ferry_Cargo\",\n    grepl(\"Research\", type, ignore.case = TRUE) ~ \"Research\", \n    grepl(\"Other\", type, ignore.case = TRUE) ~ \"Other\", \n    grepl(\"Tour\", type, ignore.case = TRUE) ~ \"Tour\", \n    grepl(\"CargoVessel\", type, ignore.case = TRUE) ~ \"Cargo_Vessel\"\n    )) %>%\n  select(-c(`_algorithm`, `type`, `_raw_source`, `Activities`, `fish_species_present`)) %>%\n  mutate(company = ifelse(is.na(company), \"Unknown\", company)) %>% # Handle NA values by replacing NA with unknown\n  rename(vessel_id = id, \n         vessel_name = Name,\n         vessel_company = company) %>%\n  select_if(~ !any(is.na(.)))\n```\n:::\n\n\n\n# 3. Visualisation\n## 3.1.1 Vessels' Possible Delivery Content\n## 3.1.2 Vessels' Possible Delivery Content By Season\n\n## 3.2.1 Transponder Ping Pattern\n\nTransponder ping data can provide the locations the vessels from shipping company has been to and give insight whether vessels have visited non-fishing areas. In this section, we will focus only on fishing vessels to understand fishing activities.\n\n::: {.cell}\n\n```{.r .cell-code}\n# Rename target column as vessel_id\nE_Tping_c <- E_Tping_c %>%\n  rename(vessel_id = target)\n```\n:::\n\n\nPlot a network graph showing all the shipping vessel movements by different companies\n\n::: {.cell}\n\n```{.r .cell-code}\n# Join data tables to include vessel_type, vessel_company in transponder ping data and filter only Fishing vessel type\nE_Tping_c_Fishing <- E_Tping_c %>%\n  left_join(N_vessel %>% select(vessel_id, vessel_type, vessel_company), by = \"vessel_id\") %>%\n  filter(vessel_type == \"Fishing\")\n\nedges <- data.frame(\n  from = E_Tping_c_Fishing$vessel_company,\n  to = E_Tping_c_Fishing$source\n)\n\n# Create a graph object\ngraph <- graph_from_data_frame(edges, directed = FALSE)\n\n# Plot the network\nplot(graph, vertex.size=10, vertex.label.cex=0.8, vertex.label.color=\"black\",\n     main=\"Network Visualization of Vessel Movement\")\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex03_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\nZoom into SouthSeafood Express Corp's vessel movement to uncover any suspicious behaviour.\n\n::: {.cell}\n\n```{.r .cell-code}\n# Filter SouthSeafood Express Corp Vessels Only\nE_Tping_c_Fishing_SS <- E_Tping_c_Fishing %>%\n  filter(vessel_company == \"SouthSeafood Express Corp\")\n\nedges_ss <- data.frame(\n  from = E_Tping_c_Fishing_SS$vessel_company,\n  to = E_Tping_c_Fishing_SS$source\n)\n\n# Create a graph object\ngraph_ss <- graph_from_data_frame(edges_ss, directed = FALSE)\n\n\n# Create a vertex attribute to distinguish between boats, SouthSeafood, and other companies\nV(graph_ss)$type <- ifelse(V(graph_ss)$name == \"SouthSeafood Express Corp\", \"southseafood\", \n                        ifelse(V(graph)$name %in% E_Tping_c_Fishing_SS$vessel_id, \"boat\", \"location\"))\n\n# Plot the network with ggraph\nggraph(graph_ss, layout = 'fr') +  # 'fr' layout (Fruchterman-Reingold) to spread nodes nicely\n  geom_edge_link(aes(width = 1), edge_colour = \"grey\") +  # Add edges with grey color\n  geom_node_point(aes(color = type), size = 5) +  # Add nodes with different colors based on type\n  geom_node_text(aes(label = name), repel = TRUE, size = 3, color = \"black\") +  # Add labels with repulsion\n  scale_color_manual(values = c(\"boat\" = \"orange\", \"location\" = \"blue\", \"southseafood\" = \"red\")) +  # Define custom colors\n  theme_void() +  # Use a void theme to remove background grid\n  labs(title = \"Network Visualization of SouthSeafood Express Corp Vessel Movement\")  # Add title\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex03_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n## 3.2.2 Catch Content Comparison\n\n# 4. Conclusion\n\n# 5. References",
    "supporting": [
      "Take-home_Ex03_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}