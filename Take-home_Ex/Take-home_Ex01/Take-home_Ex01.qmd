---
title: "Take-home Exercise 1"
subtitle: "Creating data visualisation beyond default"
author: "Thet Myat Noe"
date: "April 16, 2024"
date-modified: "last-modified"
execute:
  eval: true
  echo: true
  warning: false
  freeze: true
---

# Overview

## Setting the scene

There are two major residential property market in Singapore, namely public and private housing. Public housing aims to meet the basic need of the general public with monthly household income less than or equal to S\$14,000. For families with monthly household income more than S\$14,000, they need to turn to the private residential market.

## Task

Analyse realis property data to reveal the private residential market and sub-markets of Singapore for the 1st quarter of 2024.

# Getting Started

## Installing and loading the required libraries

```{r}
pacman::p_load(tidyverse,dplyr,lubridate,patchwork)
```

## Importing Data

Below code imports 5 .csv data from realis into R environment by utilizing [*`read_csv()`*](https://readr.tidyverse.org/reference/read_delim.html) function of [**readr**](https://readr.tidyverse.org/) package. **readr** is part of tidyverse packages.

```{r}
realis1 <- read_csv("data/ResidentialTransaction20240308160536.csv")
realis2 <- read_csv("data/ResidentialTransaction20240308160736.csv")
realis3 <- read_csv("data/ResidentialTransaction20240308161009.csv")
realis4 <- read_csv("data/ResidentialTransaction20240308161109.csv")
realis5 <- read_csv("data/ResidentialTransaction20240414220633.csv")

```

## Data Pre-processing

### Combining all quarter data into one file

All residential property market data from realis by different quarters are merged into one file.

```{r}
realis_merge <- rbind(realis1, realis2, realis3, realis4, realis5)
```

### Checking for duplicates

```{r}
realis_merge[duplicated(realis_merge),]
```

No duplicated rows are present in the data based on duplicate check above.

### Rename columns for further data visualization
Below glimpse of data set shows the current column name. We can see there are spaces in column name.
```{r }
glimpse(realis_merge)
```

Space in column names will create error when used as it is in R code. Hence, replacing them with underscore is necessary.
Use gsub() to replace space with underscores and use rename_with() function from 'dplyr' to rename all the columns with new column names.
```{r }
realis_merge <- realis_merge %>%
  rename_with(~ gsub(" ", "_", .), everything())
```

Now, we can see that column names are renamed accordingly with underscore in place of space.
```{r }
glimpse(realis_merge)
```

### Create Quarter Column
Use as.Date() function to put Sale_Date column into date object, specify format to ensure as.Date() recognize the content accurately as date.
Use year() and quarter() functions from 'lubridate' package to extract year and use paste() to concatenate the strings.

::: panel-tabset
## Code

```{r}
realis_merge$Sale_Date <- as.Date(realis_merge$Sale_Date, format = "%d %b %Y")
realis_merge$Quarter <- paste(year(realis_merge$Sale_Date), "Q", quarter(realis_merge$Sale_Date), sep="")
```

## Data Glimpse

```{r}
glimpse(realis_merge)
```

:::

# Data Visualization 1
Use ggplot2 to chart transaction count by Planning Region and Property Type breakdown by quarter.
Use ggplot2 extension called [**patchwork**](https://patchwork.data-imaginist.com/) to combine separate ggplot2 graphs into a single figure.

::: panel-tabset
## Plot

```{r,echo=FALSE}
# Get number of transactions for each combination of Property_Type and Quarter
trans_per_prop_quarter <- realis_merge %>%
  group_by(Property_Type, Quarter) %>%
  summarise(Number_of_Transactions = n(), .groups = 'drop')

# Plot the bar chart with a breakdown by quarter
p1 <- ggplot(trans_per_prop_quarter, aes(x = Property_Type, y = Number_of_Transactions, fill = Quarter)) +
  geom_bar(stat = "identity", position = "dodge") +
  theme_minimal() +
  labs(x = "Property Type", y = "No. of Transactions", title = "No. of Transactions by Property Type and Quarter")+
  theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1), plot.title = element_text(hjust = 0.5, size = 10), axis.title.y = element_text(size = rel(0.8)))

# Get overall transaction count per quarter
transactions_by_quarter <- realis_merge %>%
  count(Quarter) 

# Plot overall transaction trend
p2 <- ggplot(transactions_by_quarter, aes(x = Quarter, y = n)) +
  geom_bar(stat = "identity", fill = "skyblue") +  
  labs(
    title = "Overall Transactions by Quarter",
    x = "Quarter",
    y = "No. of Transactions"
  ) +
  ylim(0,8000) +
  geom_text(aes(label = n),  
            vjust = -0.3,
            size = rel(3),
            color = "black") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1), plot.title = element_text(hjust = 0.5, size = 10), axis.title.y = element_text(size = rel(0.8)))

p <- (p2/p1) 
p
```

## Code

```{r, fig.show = 'hide' }
# Get number of transactions for each combination of Property_Type and Quarter
trans_per_prop_quarter <- realis_merge %>%
  group_by(Property_Type, Quarter) %>%
  summarise(Number_of_Transactions = n(), .groups = 'drop')

# Plot the bar chart with a breakdown by quarter
p1 <- ggplot(trans_per_prop_quarter, aes(x = Property_Type, y = Number_of_Transactions, fill = Quarter)) +
  geom_bar(stat = "identity", position = "dodge") +
  theme_minimal() +
  labs(x = "Property Type", y = "No. of Transactions", title = "No. of Transactions by Property Type and Quarter")+
  theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1), plot.title = element_text(hjust = 0.5, size = 10), axis.title.y = element_text(size = rel(0.8)))

# Get overall transaction count per quarter
transactions_by_quarter <- realis_merge %>%
  count(Quarter) 

# Plot overall transaction trend
p2 <- ggplot(transactions_by_quarter, aes(x = Quarter, y = n)) + 
  geom_bar(stat = "identity") +  
  labs(
    title = "Overall Transactions by Quarter",
    x = "Quarter",
    y = "No. of Transactions"
  ) +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1), plot.title = element_text(hjust = 0.5, size = 10), axis.title.y = element_text(size = rel(0.8)))

p <- (p2/p1) 
p
```
:::

