---
title: "Take-home Exercise 3"
author: "Thet Myat Noe"
date: "May 14, 2024"
date-modified: "last-modified"
execute:
  eval: true
  echo: true
  warning: false
  freeze: true
---

# 1. Overview

## 1.1 Setting the scene



## 1.2 Task

This exercise aims to help FishEye, a non-profit organization that focuses on illegal fishing, to better identify bias, track behavior changes, and infer temporal patterns from the knowledge graphs prepared by their data analysts.

# 2. Getting Started

## 2.1 Installing and loading the required libraries
The code chunk below uses `p_load()` function from **pacman** package to check if packages listed are already installed in the computer. The packages are loaded if they are found to be installed. If they are not installed, the function will proceed to install and load them into R environment.

```{r}
pacman::p_load(jsonlite,readxl,tidyverse,ggridges)
```

## 2.2 Importing Data
```{r}
mc2_data <- fromJSON("data/MC2/mc2.json")
```

```{r}
# Convert date_added to Date type if it's not already
# mc2_data$date_added <- as.Date(mc2_data$date_added)

# Filter data to include only relevant details or clean data as needed
# clean_data <- mc2_data %>%
  # filter(!is.na(date_added)) %>% # Ensures that only entries with a valid 'date_added' are used
  # select(Name, date_added, flag_country, tonnage) # Selects only the relevant columns

```

```{r}
recruitment_data <- read_excel("data/JobWanted.xlsx")
```


```{r}
recruitment_data <- recruitment_data %>%
  mutate(min_salary = ifelse(grepl("K", salary), 
                             as.numeric(gsub("K.*", "", sub("-.*", "", salary))), 
                             0),
         max_salary = ifelse(grepl("K", salary),
                             as.numeric(gsub("K.*", "", sub(".*-", "", salary))),
                             0))
```

```{r}
ggplot(recruitment_data, aes(x = min_salary, y = experience, fill = experience)) +
  geom_density_ridges(scale = 3) +
  theme_minimal() +
  labs(title = "Salary Distribution (Min) per Experience Type",
       x = "Minimum Salary (K)",
       y = "Experience Type") +
  theme(legend.position = "none")
```


```{r}
ggplot(recruitment_data, aes(x = max_salary, y = experience, fill = experience)) +
  geom_density_ridges(scale = 3) +
  theme_minimal() +
  labs(title = "Salary Distribution (Max) per Experience Type",
       x = "Maximum Salary (K)",
       y = "Experience Type") +
  theme(legend.position = "none")
```

```{r}
ggplot(recruitment_data, aes(x = min_salary, y = company_type, fill = company_type)) +
  geom_density_ridges(scale = 3) +
  theme_minimal() +
  labs(title = "Salary Distribution (Min) per Company Type",
       x = "Minimum Salary (K)",
       y = "Company Type") +
  theme(legend.position = "none")
```


```{r}
ggplot(recruitment_data, aes(x = max_salary, y = company_type, fill = company_type)) +
  geom_density_ridges(scale = 3) +
  theme_minimal() +
  labs(title = "Salary Distribution (Max) per Company Type",
       x = "Maximum Salary (K)",
       y = "Company Type") +
  theme(legend.position = "none")
```